
LAB3_E1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002954  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a84  08002a84  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  08002a84  08002a84  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a84  08002a84  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a84  08002a84  00012a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a88  08002a88  00012a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000094  08002b20  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002b20  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009865  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b69  00000000  00000000  00029922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  0002b490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000988  00000000  00000000  0002bf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a5b  00000000  00000000  0002c898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5f5  00000000  00000000  000432f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822de  00000000  00000000  0004e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0bc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ac  00000000  00000000  000d0c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000094 	.word	0x20000094
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a48 	.word	0x08002a48

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000098 	.word	0x20000098
 8000148:	08002a48 	.word	0x08002a48

0800014c <isButtonPressed0>:

int LPress0= NORMAL_STATE;
int countForPressedKey0=200;
int button_flag0=0;

int isButtonPressed0(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button_flag0==1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButtonPressed0+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButtonPressed0+0x16>
		button_flag0=0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButtonPressed0+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButtonPressed0+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	200000b0 	.word	0x200000b0

08000170 <getKeyInput0>:

void getKeyInput0(){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Key0= Key1;
 8000174:	4b21      	ldr	r3, [pc, #132]	; (80001fc <getKeyInput0+0x8c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a21      	ldr	r2, [pc, #132]	; (8000200 <getKeyInput0+0x90>)
 800017a:	6013      	str	r3, [r2, #0]
	Key1= Key2;
 800017c:	4b21      	ldr	r3, [pc, #132]	; (8000204 <getKeyInput0+0x94>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	4a1e      	ldr	r2, [pc, #120]	; (80001fc <getKeyInput0+0x8c>)
 8000182:	6013      	str	r3, [r2, #0]
	Key2= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000188:	481f      	ldr	r0, [pc, #124]	; (8000208 <getKeyInput0+0x98>)
 800018a:	f001 fc31 	bl	80019f0 <HAL_GPIO_ReadPin>
 800018e:	4603      	mov	r3, r0
 8000190:	461a      	mov	r2, r3
 8000192:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <getKeyInput0+0x94>)
 8000194:	601a      	str	r2, [r3, #0]

	if((Key0==Key1)&&(Key1==Key2)){
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <getKeyInput0+0x90>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b18      	ldr	r3, [pc, #96]	; (80001fc <getKeyInput0+0x8c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d129      	bne.n	80001f6 <getKeyInput0+0x86>
 80001a2:	4b16      	ldr	r3, [pc, #88]	; (80001fc <getKeyInput0+0x8c>)
 80001a4:	681a      	ldr	r2, [r3, #0]
 80001a6:	4b17      	ldr	r3, [pc, #92]	; (8000204 <getKeyInput0+0x94>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d123      	bne.n	80001f6 <getKeyInput0+0x86>
		if(LPress0!= Key2){
 80001ae:	4b17      	ldr	r3, [pc, #92]	; (800020c <getKeyInput0+0x9c>)
 80001b0:	681a      	ldr	r2, [r3, #0]
 80001b2:	4b14      	ldr	r3, [pc, #80]	; (8000204 <getKeyInput0+0x94>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	429a      	cmp	r2, r3
 80001b8:	d00e      	beq.n	80001d8 <getKeyInput0+0x68>
			LPress0= Key2;
 80001ba:	4b12      	ldr	r3, [pc, #72]	; (8000204 <getKeyInput0+0x94>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <getKeyInput0+0x9c>)
 80001c0:	6013      	str	r3, [r2, #0]
			if(Key2==PRESSED_STATE){
 80001c2:	4b10      	ldr	r3, [pc, #64]	; (8000204 <getKeyInput0+0x94>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d115      	bne.n	80001f6 <getKeyInput0+0x86>
				button_flag0=1;
 80001ca:	4b11      	ldr	r3, [pc, #68]	; (8000210 <getKeyInput0+0xa0>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	601a      	str	r2, [r3, #0]
				countForPressedKey0=200;
 80001d0:	4b10      	ldr	r3, [pc, #64]	; (8000214 <getKeyInput0+0xa4>)
 80001d2:	22c8      	movs	r2, #200	; 0xc8
 80001d4:	601a      	str	r2, [r3, #0]
				LPress0= NORMAL_STATE;
				countForPressedKey0=200;
			}
		}
	}
}
 80001d6:	e00e      	b.n	80001f6 <getKeyInput0+0x86>
			countForPressedKey0--;
 80001d8:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <getKeyInput0+0xa4>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3b01      	subs	r3, #1
 80001de:	4a0d      	ldr	r2, [pc, #52]	; (8000214 <getKeyInput0+0xa4>)
 80001e0:	6013      	str	r3, [r2, #0]
			if(countForPressedKey0==0){
 80001e2:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <getKeyInput0+0xa4>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d105      	bne.n	80001f6 <getKeyInput0+0x86>
				LPress0= NORMAL_STATE;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <getKeyInput0+0x9c>)
 80001ec:	2201      	movs	r2, #1
 80001ee:	601a      	str	r2, [r3, #0]
				countForPressedKey0=200;
 80001f0:	4b08      	ldr	r3, [pc, #32]	; (8000214 <getKeyInput0+0xa4>)
 80001f2:	22c8      	movs	r2, #200	; 0xc8
 80001f4:	601a      	str	r2, [r3, #0]
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	20000004 	.word	0x20000004
 8000200:	20000000 	.word	0x20000000
 8000204:	20000008 	.word	0x20000008
 8000208:	40011000 	.word	0x40011000
 800020c:	2000000c 	.word	0x2000000c
 8000210:	200000b0 	.word	0x200000b0
 8000214:	20000010 	.word	0x20000010

08000218 <isButtonPressed1>:

int LPress1= NORMAL_STATE;
int countForPressedKey1=200;
int button_flag1=0;

int isButtonPressed1(){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	if(button_flag1==1){
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <isButtonPressed1+0x20>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d104      	bne.n	800022e <isButtonPressed1+0x16>
		button_flag1=0;
 8000224:	4b04      	ldr	r3, [pc, #16]	; (8000238 <isButtonPressed1+0x20>)
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
		return 1;
 800022a:	2301      	movs	r3, #1
 800022c:	e000      	b.n	8000230 <isButtonPressed1+0x18>
	}
	return 0;
 800022e:	2300      	movs	r3, #0
}
 8000230:	4618      	mov	r0, r3
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	200000b4 	.word	0x200000b4

0800023c <getKeyInput1>:

void getKeyInput1(){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	Key3= Key4;
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <getKeyInput1+0x8c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	4a21      	ldr	r2, [pc, #132]	; (80002cc <getKeyInput1+0x90>)
 8000246:	6013      	str	r3, [r2, #0]
	Key4= Key5;
 8000248:	4b21      	ldr	r3, [pc, #132]	; (80002d0 <getKeyInput1+0x94>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a1e      	ldr	r2, [pc, #120]	; (80002c8 <getKeyInput1+0x8c>)
 800024e:	6013      	str	r3, [r2, #0]
	Key5= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 8000250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000254:	481f      	ldr	r0, [pc, #124]	; (80002d4 <getKeyInput1+0x98>)
 8000256:	f001 fbcb 	bl	80019f0 <HAL_GPIO_ReadPin>
 800025a:	4603      	mov	r3, r0
 800025c:	461a      	mov	r2, r3
 800025e:	4b1c      	ldr	r3, [pc, #112]	; (80002d0 <getKeyInput1+0x94>)
 8000260:	601a      	str	r2, [r3, #0]

	if((Key3==Key4)&&(Key4==Key5)){
 8000262:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <getKeyInput1+0x90>)
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <getKeyInput1+0x8c>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	429a      	cmp	r2, r3
 800026c:	d129      	bne.n	80002c2 <getKeyInput1+0x86>
 800026e:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <getKeyInput1+0x8c>)
 8000270:	681a      	ldr	r2, [r3, #0]
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <getKeyInput1+0x94>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	429a      	cmp	r2, r3
 8000278:	d123      	bne.n	80002c2 <getKeyInput1+0x86>
		if(LPress1!= Key5){
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <getKeyInput1+0x9c>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <getKeyInput1+0x94>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	429a      	cmp	r2, r3
 8000284:	d00e      	beq.n	80002a4 <getKeyInput1+0x68>
			LPress1= Key5;
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <getKeyInput1+0x94>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <getKeyInput1+0x9c>)
 800028c:	6013      	str	r3, [r2, #0]
			if(Key5==PRESSED_STATE){
 800028e:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <getKeyInput1+0x94>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d115      	bne.n	80002c2 <getKeyInput1+0x86>
				button_flag1=1;
 8000296:	4b11      	ldr	r3, [pc, #68]	; (80002dc <getKeyInput1+0xa0>)
 8000298:	2201      	movs	r2, #1
 800029a:	601a      	str	r2, [r3, #0]
				countForPressedKey1=200;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <getKeyInput1+0xa4>)
 800029e:	22c8      	movs	r2, #200	; 0xc8
 80002a0:	601a      	str	r2, [r3, #0]
				LPress1= NORMAL_STATE;
				countForPressedKey1=200;
			}
		}
	}
}
 80002a2:	e00e      	b.n	80002c2 <getKeyInput1+0x86>
			countForPressedKey1--;
 80002a4:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <getKeyInput1+0xa4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	3b01      	subs	r3, #1
 80002aa:	4a0d      	ldr	r2, [pc, #52]	; (80002e0 <getKeyInput1+0xa4>)
 80002ac:	6013      	str	r3, [r2, #0]
			if(countForPressedKey1==0){
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <getKeyInput1+0xa4>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d105      	bne.n	80002c2 <getKeyInput1+0x86>
				LPress1= NORMAL_STATE;
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <getKeyInput1+0x9c>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	601a      	str	r2, [r3, #0]
				countForPressedKey1=200;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <getKeyInput1+0xa4>)
 80002be:	22c8      	movs	r2, #200	; 0xc8
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000018 	.word	0x20000018
 80002cc:	20000014 	.word	0x20000014
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	40011000 	.word	0x40011000
 80002d8:	20000020 	.word	0x20000020
 80002dc:	200000b4 	.word	0x200000b4
 80002e0:	20000024 	.word	0x20000024

080002e4 <isButtonPressed2>:

int LPress2= NORMAL_STATE;
int countForPressedKey2=200;
int button_flag2=0;

int isButtonPressed2(){
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
	if(button_flag2==1){
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <isButtonPressed2+0x20>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b01      	cmp	r3, #1
 80002ee:	d104      	bne.n	80002fa <isButtonPressed2+0x16>
		button_flag2=0;
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <isButtonPressed2+0x20>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
		return 1;
 80002f6:	2301      	movs	r3, #1
 80002f8:	e000      	b.n	80002fc <isButtonPressed2+0x18>
	}
	return 0;
 80002fa:	2300      	movs	r3, #0
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	200000b8 	.word	0x200000b8

08000308 <getKeyInput2>:

void getKeyInput2(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	Key6= Key7;
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <getKeyInput2+0x8c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a21      	ldr	r2, [pc, #132]	; (8000398 <getKeyInput2+0x90>)
 8000312:	6013      	str	r3, [r2, #0]
	Key7= Key8;
 8000314:	4b21      	ldr	r3, [pc, #132]	; (800039c <getKeyInput2+0x94>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a1e      	ldr	r2, [pc, #120]	; (8000394 <getKeyInput2+0x8c>)
 800031a:	6013      	str	r3, [r2, #0]
	Key8= HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 800031c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000320:	481f      	ldr	r0, [pc, #124]	; (80003a0 <getKeyInput2+0x98>)
 8000322:	f001 fb65 	bl	80019f0 <HAL_GPIO_ReadPin>
 8000326:	4603      	mov	r3, r0
 8000328:	461a      	mov	r2, r3
 800032a:	4b1c      	ldr	r3, [pc, #112]	; (800039c <getKeyInput2+0x94>)
 800032c:	601a      	str	r2, [r3, #0]

	if((Key6==Key7)&&(Key7==Key8)){
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <getKeyInput2+0x90>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getKeyInput2+0x8c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d129      	bne.n	800038e <getKeyInput2+0x86>
 800033a:	4b16      	ldr	r3, [pc, #88]	; (8000394 <getKeyInput2+0x8c>)
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	4b17      	ldr	r3, [pc, #92]	; (800039c <getKeyInput2+0x94>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	429a      	cmp	r2, r3
 8000344:	d123      	bne.n	800038e <getKeyInput2+0x86>
		if(LPress2!= Key8){
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <getKeyInput2+0x9c>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	4b14      	ldr	r3, [pc, #80]	; (800039c <getKeyInput2+0x94>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	429a      	cmp	r2, r3
 8000350:	d00e      	beq.n	8000370 <getKeyInput2+0x68>
			LPress2= Key8;
 8000352:	4b12      	ldr	r3, [pc, #72]	; (800039c <getKeyInput2+0x94>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <getKeyInput2+0x9c>)
 8000358:	6013      	str	r3, [r2, #0]
			if(Key8==PRESSED_STATE){
 800035a:	4b10      	ldr	r3, [pc, #64]	; (800039c <getKeyInput2+0x94>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	2b00      	cmp	r3, #0
 8000360:	d115      	bne.n	800038e <getKeyInput2+0x86>
				button_flag2=1;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <getKeyInput2+0xa0>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
				countForPressedKey2=200;
 8000368:	4b10      	ldr	r3, [pc, #64]	; (80003ac <getKeyInput2+0xa4>)
 800036a:	22c8      	movs	r2, #200	; 0xc8
 800036c:	601a      	str	r2, [r3, #0]
				LPress2= NORMAL_STATE;
				countForPressedKey2=200;
			}
		}
	}
}
 800036e:	e00e      	b.n	800038e <getKeyInput2+0x86>
			countForPressedKey2--;
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <getKeyInput2+0xa4>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	3b01      	subs	r3, #1
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <getKeyInput2+0xa4>)
 8000378:	6013      	str	r3, [r2, #0]
			if(countForPressedKey2==0){
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <getKeyInput2+0xa4>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d105      	bne.n	800038e <getKeyInput2+0x86>
				LPress2= NORMAL_STATE;
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <getKeyInput2+0x9c>)
 8000384:	2201      	movs	r2, #1
 8000386:	601a      	str	r2, [r3, #0]
				countForPressedKey2=200;
 8000388:	4b08      	ldr	r3, [pc, #32]	; (80003ac <getKeyInput2+0xa4>)
 800038a:	22c8      	movs	r2, #200	; 0xc8
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000002c 	.word	0x2000002c
 8000398:	20000028 	.word	0x20000028
 800039c:	20000030 	.word	0x20000030
 80003a0:	40011000 	.word	0x40011000
 80003a4:	20000034 	.word	0x20000034
 80003a8:	200000b8 	.word	0x200000b8
 80003ac:	20000038 	.word	0x20000038

080003b0 <clamp_min1>:

int numRed;
int numGreen;
int numAmber;

static inline int clamp_min1(int v) { return v < 1 ? 1 : v; }
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	bfb8      	it	lt
 80003be:	2301      	movlt	r3, #1
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <clamp_amber>:
static inline int clamp_amber(int v, int maxAmber) {
 80003ca:	b480      	push	{r7}
 80003cc:	b083      	sub	sp, #12
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	6078      	str	r0, [r7, #4]
 80003d2:	6039      	str	r1, [r7, #0]
    if (v > maxAmber) v = maxAmber;
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	429a      	cmp	r2, r3
 80003da:	dd01      	ble.n	80003e0 <clamp_amber+0x16>
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	607b      	str	r3, [r7, #4]
    return v < 1 ? 1 : v;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	bfb8      	it	lt
 80003e6:	2301      	movlt	r3, #1
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	370c      	adds	r7, #12
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bc80      	pop	{r7}
 80003f0:	4770      	bx	lr
	...

080003f4 <fsm_auto_run>:

void fsm_auto_run() {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    extern void set_timer0(int ms);
    extern void set_timer3(int ms);

    static int entry_GR = 1, entry_AR = 1, entry_RG = 1, entry_RA = 1;

    switch (state) {
 80003f8:	4b83      	ldr	r3, [pc, #524]	; (8000608 <fsm_auto_run+0x214>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	3b01      	subs	r3, #1
 80003fe:	2b05      	cmp	r3, #5
 8000400:	f200 820c 	bhi.w	800081c <fsm_auto_run+0x428>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <fsm_auto_run+0x18>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000425 	.word	0x08000425
 8000410:	0800046f 	.word	0x0800046f
 8000414:	0800053b 	.word	0x0800053b
 8000418:	0800063d 	.word	0x0800063d
 800041c:	08000709 	.word	0x08000709
 8000420:	080007d3 	.word	0x080007d3
    case INIT:
        LED_monitor(OFF_STATE);
 8000424:	2004      	movs	r0, #4
 8000426:	f000 fc69 	bl	8000cfc <LED_monitor>
        LED_monitor2(OFF_STATE);
 800042a:	2004      	movs	r0, #4
 800042c:	f000 fcc0 	bl	8000db0 <LED_monitor2>
        numRed   = init_numRed;
 8000430:	4b76      	ldr	r3, [pc, #472]	; (800060c <fsm_auto_run+0x218>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a76      	ldr	r2, [pc, #472]	; (8000610 <fsm_auto_run+0x21c>)
 8000436:	6013      	str	r3, [r2, #0]
        numGreen = init_numGreen;
 8000438:	4b76      	ldr	r3, [pc, #472]	; (8000614 <fsm_auto_run+0x220>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a76      	ldr	r2, [pc, #472]	; (8000618 <fsm_auto_run+0x224>)
 800043e:	6013      	str	r3, [r2, #0]
        numAmber = init_numAmber;
 8000440:	4b76      	ldr	r3, [pc, #472]	; (800061c <fsm_auto_run+0x228>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a76      	ldr	r2, [pc, #472]	; (8000620 <fsm_auto_run+0x22c>)
 8000446:	6013      	str	r3, [r2, #0]
        state = GREEN_RED;
 8000448:	4b6f      	ldr	r3, [pc, #444]	; (8000608 <fsm_auto_run+0x214>)
 800044a:	2202      	movs	r2, #2
 800044c:	601a      	str	r2, [r3, #0]
        entry_GR = entry_AR = entry_RG = entry_RA = 1;
 800044e:	4b75      	ldr	r3, [pc, #468]	; (8000624 <fsm_auto_run+0x230>)
 8000450:	2201      	movs	r2, #1
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	4b73      	ldr	r3, [pc, #460]	; (8000624 <fsm_auto_run+0x230>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a73      	ldr	r2, [pc, #460]	; (8000628 <fsm_auto_run+0x234>)
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	4b72      	ldr	r3, [pc, #456]	; (8000628 <fsm_auto_run+0x234>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a72      	ldr	r2, [pc, #456]	; (800062c <fsm_auto_run+0x238>)
 8000462:	6013      	str	r3, [r2, #0]
 8000464:	4b71      	ldr	r3, [pc, #452]	; (800062c <fsm_auto_run+0x238>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a71      	ldr	r2, [pc, #452]	; (8000630 <fsm_auto_run+0x23c>)
 800046a:	6013      	str	r3, [r2, #0]
        break;
 800046c:	e1df      	b.n	800082e <fsm_auto_run+0x43a>

    case GREEN_RED:
        if (entry_GR) {
 800046e:	4b70      	ldr	r3, [pc, #448]	; (8000630 <fsm_auto_run+0x23c>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d020      	beq.n	80004b8 <fsm_auto_run+0xc4>
            timer0_flag = 0;
 8000476:	4b6f      	ldr	r3, [pc, #444]	; (8000634 <fsm_auto_run+0x240>)
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
            timer3_flag = 0;
 800047c:	4b6e      	ldr	r3, [pc, #440]	; (8000638 <fsm_auto_run+0x244>)
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
            set_timer0(init_numGreen * 1000); // thời lượng pha
 8000482:	4b64      	ldr	r3, [pc, #400]	; (8000614 <fsm_auto_run+0x220>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800048a:	fb02 f303 	mul.w	r3, r2, r3
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fece 	bl	8001230 <set_timer0>
            set_timer3(1000);                 // nhịp 1s hiển thị
 8000494:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000498:	f000 ff4c 	bl	8001334 <set_timer3>
            numGreen = init_numGreen;
 800049c:	4b5d      	ldr	r3, [pc, #372]	; (8000614 <fsm_auto_run+0x220>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a5d      	ldr	r2, [pc, #372]	; (8000618 <fsm_auto_run+0x224>)
 80004a2:	6013      	str	r3, [r2, #0]
            // Đỏ đối diện đếm đến hết GREEN + AMBER
            numRed   = init_numGreen + init_numAmber;
 80004a4:	4b5b      	ldr	r3, [pc, #364]	; (8000614 <fsm_auto_run+0x220>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b5c      	ldr	r3, [pc, #368]	; (800061c <fsm_auto_run+0x228>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4413      	add	r3, r2
 80004ae:	4a58      	ldr	r2, [pc, #352]	; (8000610 <fsm_auto_run+0x21c>)
 80004b0:	6013      	str	r3, [r2, #0]
            entry_GR = 0;
 80004b2:	4b5f      	ldr	r3, [pc, #380]	; (8000630 <fsm_auto_run+0x23c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
        }

        LED_monitor(GREEN);
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 fc1f 	bl	8000cfc <LED_monitor>
        LED_monitor2(RED);
 80004be:	2002      	movs	r0, #2
 80004c0:	f000 fc76 	bl	8000db0 <LED_monitor2>

        if (timer3_flag) {
 80004c4:	4b5c      	ldr	r3, [pc, #368]	; (8000638 <fsm_auto_run+0x244>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d018      	beq.n	80004fe <fsm_auto_run+0x10a>
            timer3_flag = 0; set_timer3(1000);
 80004cc:	4b5a      	ldr	r3, [pc, #360]	; (8000638 <fsm_auto_run+0x244>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d6:	f000 ff2d 	bl	8001334 <set_timer3>
            if (numGreen > 1) numGreen--;
 80004da:	4b4f      	ldr	r3, [pc, #316]	; (8000618 <fsm_auto_run+0x224>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2b01      	cmp	r3, #1
 80004e0:	dd04      	ble.n	80004ec <fsm_auto_run+0xf8>
 80004e2:	4b4d      	ldr	r3, [pc, #308]	; (8000618 <fsm_auto_run+0x224>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	4a4b      	ldr	r2, [pc, #300]	; (8000618 <fsm_auto_run+0x224>)
 80004ea:	6013      	str	r3, [r2, #0]
            if (numRed   > 1) numRed--;
 80004ec:	4b48      	ldr	r3, [pc, #288]	; (8000610 <fsm_auto_run+0x21c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	dd04      	ble.n	80004fe <fsm_auto_run+0x10a>
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <fsm_auto_run+0x21c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	4a45      	ldr	r2, [pc, #276]	; (8000610 <fsm_auto_run+0x21c>)
 80004fc:	6013      	str	r3, [r2, #0]
        }

        displayNumber0(clamp_min1(numGreen));
 80004fe:	4b46      	ldr	r3, [pc, #280]	; (8000618 <fsm_auto_run+0x224>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff54 	bl	80003b0 <clamp_min1>
 8000508:	4603      	mov	r3, r0
 800050a:	4618      	mov	r0, r3
 800050c:	f000 fb72 	bl	8000bf4 <displayNumber0>
        displayNumber1(clamp_min1(numRed));
 8000510:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <fsm_auto_run+0x21c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4618      	mov	r0, r3
 8000516:	f7ff ff4b 	bl	80003b0 <clamp_min1>
 800051a:	4603      	mov	r3, r0
 800051c:	4618      	mov	r0, r3
 800051e:	f000 fbab 	bl	8000c78 <displayNumber1>

        if (timer0_flag) {                 // CHỈ dựa vào timer pha
 8000522:	4b44      	ldr	r3, [pc, #272]	; (8000634 <fsm_auto_run+0x240>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	f000 817a 	beq.w	8000820 <fsm_auto_run+0x42c>
            state = AMBER_RED;
 800052c:	4b36      	ldr	r3, [pc, #216]	; (8000608 <fsm_auto_run+0x214>)
 800052e:	2203      	movs	r2, #3
 8000530:	601a      	str	r2, [r3, #0]
            entry_AR = 1;
 8000532:	4b3e      	ldr	r3, [pc, #248]	; (800062c <fsm_auto_run+0x238>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
        }
        break;
 8000538:	e172      	b.n	8000820 <fsm_auto_run+0x42c>

    // ---------- HƯỚNG 0: AMBER — HƯỚNG 1: RED ----------
    case AMBER_RED:
        if (entry_AR) {
 800053a:	4b3c      	ldr	r3, [pc, #240]	; (800062c <fsm_auto_run+0x238>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d01d      	beq.n	800057e <fsm_auto_run+0x18a>
            timer0_flag = 0;
 8000542:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <fsm_auto_run+0x240>)
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
            timer3_flag = 0;
 8000548:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <fsm_auto_run+0x244>)
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
            set_timer0(init_numAmber * 1000);
 800054e:	4b33      	ldr	r3, [pc, #204]	; (800061c <fsm_auto_run+0x228>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000556:	fb02 f303 	mul.w	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 fe68 	bl	8001230 <set_timer0>
            set_timer3(1000);
 8000560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000564:	f000 fee6 	bl	8001334 <set_timer3>
            numAmber = init_numAmber;             // = 2
 8000568:	4b2c      	ldr	r3, [pc, #176]	; (800061c <fsm_auto_run+0x228>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a2c      	ldr	r2, [pc, #176]	; (8000620 <fsm_auto_run+0x22c>)
 800056e:	6013      	str	r3, [r2, #0]
            numRed   = init_numAmber;             // đỏ còn đúng phần AMBER này
 8000570:	4b2a      	ldr	r3, [pc, #168]	; (800061c <fsm_auto_run+0x228>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a26      	ldr	r2, [pc, #152]	; (8000610 <fsm_auto_run+0x21c>)
 8000576:	6013      	str	r3, [r2, #0]
            entry_AR = 0;
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <fsm_auto_run+0x238>)
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
        }

        LED_monitor(YELLOW);
 800057e:	2001      	movs	r0, #1
 8000580:	f000 fbbc 	bl	8000cfc <LED_monitor>
        LED_monitor2(RED);
 8000584:	2002      	movs	r0, #2
 8000586:	f000 fc13 	bl	8000db0 <LED_monitor2>

        if (timer3_flag) {
 800058a:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <fsm_auto_run+0x244>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d018      	beq.n	80005c4 <fsm_auto_run+0x1d0>
            timer3_flag = 0; set_timer3(1000);
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <fsm_auto_run+0x244>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059c:	f000 feca 	bl	8001334 <set_timer3>
            if (numAmber > 1) numAmber--;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <fsm_auto_run+0x22c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	dd04      	ble.n	80005b2 <fsm_auto_run+0x1be>
 80005a8:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <fsm_auto_run+0x22c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3b01      	subs	r3, #1
 80005ae:	4a1c      	ldr	r2, [pc, #112]	; (8000620 <fsm_auto_run+0x22c>)
 80005b0:	6013      	str	r3, [r2, #0]
            if (numRed   > 1) numRed--;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <fsm_auto_run+0x21c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	dd04      	ble.n	80005c4 <fsm_auto_run+0x1d0>
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <fsm_auto_run+0x21c>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <fsm_auto_run+0x21c>)
 80005c2:	6013      	str	r3, [r2, #0]
        }

        displayNumber0(clamp_amber(numAmber, init_numAmber)); // không bao giờ > 2
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <fsm_auto_run+0x22c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a14      	ldr	r2, [pc, #80]	; (800061c <fsm_auto_run+0x228>)
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fefb 	bl	80003ca <clamp_amber>
 80005d4:	4603      	mov	r3, r0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fb0c 	bl	8000bf4 <displayNumber0>
        displayNumber1(clamp_min1(numRed));
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <fsm_auto_run+0x21c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fee5 	bl	80003b0 <clamp_min1>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fb45 	bl	8000c78 <displayNumber1>

        if (timer0_flag) {
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <fsm_auto_run+0x240>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	f000 8116 	beq.w	8000824 <fsm_auto_run+0x430>
            state = RED_GREEN;
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <fsm_auto_run+0x214>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	601a      	str	r2, [r3, #0]
            entry_RG = 1;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <fsm_auto_run+0x234>)
 8000600:	2201      	movs	r2, #1
 8000602:	601a      	str	r2, [r3, #0]
        }
        break;
 8000604:	e10e      	b.n	8000824 <fsm_auto_run+0x430>
 8000606:	bf00      	nop
 8000608:	200000bc 	.word	0x200000bc
 800060c:	2000003c 	.word	0x2000003c
 8000610:	200000fc 	.word	0x200000fc
 8000614:	20000040 	.word	0x20000040
 8000618:	200000f8 	.word	0x200000f8
 800061c:	20000044 	.word	0x20000044
 8000620:	20000100 	.word	0x20000100
 8000624:	20000048 	.word	0x20000048
 8000628:	2000004c 	.word	0x2000004c
 800062c:	20000050 	.word	0x20000050
 8000630:	20000054 	.word	0x20000054
 8000634:	200000d8 	.word	0x200000d8
 8000638:	200000f0 	.word	0x200000f0

    // ---------- HƯỚNG 0: RED — HƯỚNG 1: GREEN ----------
    case RED_GREEN:
        if (entry_RG) {
 800063c:	4b7d      	ldr	r3, [pc, #500]	; (8000834 <fsm_auto_run+0x440>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d020      	beq.n	8000686 <fsm_auto_run+0x292>
            timer0_flag = 0;
 8000644:	4b7c      	ldr	r3, [pc, #496]	; (8000838 <fsm_auto_run+0x444>)
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
            timer3_flag = 0;
 800064a:	4b7c      	ldr	r3, [pc, #496]	; (800083c <fsm_auto_run+0x448>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
            set_timer0(init_numGreen * 1000);
 8000650:	4b7b      	ldr	r3, [pc, #492]	; (8000840 <fsm_auto_run+0x44c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fde7 	bl	8001230 <set_timer0>
            set_timer3(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f000 fe65 	bl	8001334 <set_timer3>
            numGreen = init_numGreen;
 800066a:	4b75      	ldr	r3, [pc, #468]	; (8000840 <fsm_auto_run+0x44c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a75      	ldr	r2, [pc, #468]	; (8000844 <fsm_auto_run+0x450>)
 8000670:	6013      	str	r3, [r2, #0]
            numRed   = init_numGreen + init_numAmber; // đỏ còn GREEN+AMBER của hướng 1
 8000672:	4b73      	ldr	r3, [pc, #460]	; (8000840 <fsm_auto_run+0x44c>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	4b74      	ldr	r3, [pc, #464]	; (8000848 <fsm_auto_run+0x454>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a73      	ldr	r2, [pc, #460]	; (800084c <fsm_auto_run+0x458>)
 800067e:	6013      	str	r3, [r2, #0]
            entry_RG = 0;
 8000680:	4b6c      	ldr	r3, [pc, #432]	; (8000834 <fsm_auto_run+0x440>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
        }

        LED_monitor(RED);
 8000686:	2002      	movs	r0, #2
 8000688:	f000 fb38 	bl	8000cfc <LED_monitor>
        LED_monitor2(GREEN);
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fb8f 	bl	8000db0 <LED_monitor2>

        if (timer3_flag) {
 8000692:	4b6a      	ldr	r3, [pc, #424]	; (800083c <fsm_auto_run+0x448>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d018      	beq.n	80006cc <fsm_auto_run+0x2d8>
            timer3_flag = 0; set_timer3(1000);
 800069a:	4b68      	ldr	r3, [pc, #416]	; (800083c <fsm_auto_run+0x448>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a4:	f000 fe46 	bl	8001334 <set_timer3>
            if (numGreen > 1) numGreen--;
 80006a8:	4b66      	ldr	r3, [pc, #408]	; (8000844 <fsm_auto_run+0x450>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	dd04      	ble.n	80006ba <fsm_auto_run+0x2c6>
 80006b0:	4b64      	ldr	r3, [pc, #400]	; (8000844 <fsm_auto_run+0x450>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a63      	ldr	r2, [pc, #396]	; (8000844 <fsm_auto_run+0x450>)
 80006b8:	6013      	str	r3, [r2, #0]
            if (numRed   > 1) numRed--;
 80006ba:	4b64      	ldr	r3, [pc, #400]	; (800084c <fsm_auto_run+0x458>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	dd04      	ble.n	80006cc <fsm_auto_run+0x2d8>
 80006c2:	4b62      	ldr	r3, [pc, #392]	; (800084c <fsm_auto_run+0x458>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a60      	ldr	r2, [pc, #384]	; (800084c <fsm_auto_run+0x458>)
 80006ca:	6013      	str	r3, [r2, #0]
        }

        displayNumber0(clamp_min1(numRed));
 80006cc:	4b5f      	ldr	r3, [pc, #380]	; (800084c <fsm_auto_run+0x458>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe6d 	bl	80003b0 <clamp_min1>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fa8b 	bl	8000bf4 <displayNumber0>
        displayNumber1(clamp_min1(numGreen));
 80006de:	4b59      	ldr	r3, [pc, #356]	; (8000844 <fsm_auto_run+0x450>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4618      	mov	r0, r3
 80006e4:	f7ff fe64 	bl	80003b0 <clamp_min1>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 fac4 	bl	8000c78 <displayNumber1>

        if (timer0_flag) {
 80006f0:	4b51      	ldr	r3, [pc, #324]	; (8000838 <fsm_auto_run+0x444>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	f000 8097 	beq.w	8000828 <fsm_auto_run+0x434>
            state = RED_AMBER;
 80006fa:	4b55      	ldr	r3, [pc, #340]	; (8000850 <fsm_auto_run+0x45c>)
 80006fc:	2205      	movs	r2, #5
 80006fe:	601a      	str	r2, [r3, #0]
            entry_RA = 1;
 8000700:	4b54      	ldr	r3, [pc, #336]	; (8000854 <fsm_auto_run+0x460>)
 8000702:	2201      	movs	r2, #1
 8000704:	601a      	str	r2, [r3, #0]
        }
        break;
 8000706:	e08f      	b.n	8000828 <fsm_auto_run+0x434>

    // ---------- HƯỚNG 0: RED — HƯỚNG 1: AMBER ----------
    case RED_AMBER:
        if (entry_RA) {
 8000708:	4b52      	ldr	r3, [pc, #328]	; (8000854 <fsm_auto_run+0x460>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d01d      	beq.n	800074c <fsm_auto_run+0x358>
            timer0_flag = 0;
 8000710:	4b49      	ldr	r3, [pc, #292]	; (8000838 <fsm_auto_run+0x444>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
            timer3_flag = 0;
 8000716:	4b49      	ldr	r3, [pc, #292]	; (800083c <fsm_auto_run+0x448>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
            set_timer0(init_numAmber * 1000);
 800071c:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <fsm_auto_run+0x454>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000724:	fb02 f303 	mul.w	r3, r2, r3
 8000728:	4618      	mov	r0, r3
 800072a:	f000 fd81 	bl	8001230 <set_timer0>
            set_timer3(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f000 fdff 	bl	8001334 <set_timer3>
            numAmber = init_numAmber;
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <fsm_auto_run+0x454>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a47      	ldr	r2, [pc, #284]	; (8000858 <fsm_auto_run+0x464>)
 800073c:	6013      	str	r3, [r2, #0]
            numRed   = init_numAmber;
 800073e:	4b42      	ldr	r3, [pc, #264]	; (8000848 <fsm_auto_run+0x454>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a42      	ldr	r2, [pc, #264]	; (800084c <fsm_auto_run+0x458>)
 8000744:	6013      	str	r3, [r2, #0]
            entry_RA = 0;
 8000746:	4b43      	ldr	r3, [pc, #268]	; (8000854 <fsm_auto_run+0x460>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
        }

        LED_monitor(RED);
 800074c:	2002      	movs	r0, #2
 800074e:	f000 fad5 	bl	8000cfc <LED_monitor>
        LED_monitor2(YELLOW);
 8000752:	2001      	movs	r0, #1
 8000754:	f000 fb2c 	bl	8000db0 <LED_monitor2>

        if (timer3_flag) {
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <fsm_auto_run+0x448>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d018      	beq.n	8000792 <fsm_auto_run+0x39e>
            timer3_flag = 0; set_timer3(1000);
 8000760:	4b36      	ldr	r3, [pc, #216]	; (800083c <fsm_auto_run+0x448>)
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800076a:	f000 fde3 	bl	8001334 <set_timer3>
            if (numAmber > 1) numAmber--;
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <fsm_auto_run+0x464>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2b01      	cmp	r3, #1
 8000774:	dd04      	ble.n	8000780 <fsm_auto_run+0x38c>
 8000776:	4b38      	ldr	r3, [pc, #224]	; (8000858 <fsm_auto_run+0x464>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a36      	ldr	r2, [pc, #216]	; (8000858 <fsm_auto_run+0x464>)
 800077e:	6013      	str	r3, [r2, #0]
            if (numRed   > 1) numRed--;
 8000780:	4b32      	ldr	r3, [pc, #200]	; (800084c <fsm_auto_run+0x458>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	dd04      	ble.n	8000792 <fsm_auto_run+0x39e>
 8000788:	4b30      	ldr	r3, [pc, #192]	; (800084c <fsm_auto_run+0x458>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a2f      	ldr	r2, [pc, #188]	; (800084c <fsm_auto_run+0x458>)
 8000790:	6013      	str	r3, [r2, #0]
        }

        displayNumber0(clamp_min1(numRed));
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <fsm_auto_run+0x458>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe0a 	bl	80003b0 <clamp_min1>
 800079c:	4603      	mov	r3, r0
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fa28 	bl	8000bf4 <displayNumber0>
        displayNumber1(clamp_amber(numAmber, init_numAmber));
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <fsm_auto_run+0x464>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <fsm_auto_run+0x454>)
 80007aa:	6812      	ldr	r2, [r2, #0]
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fe0b 	bl	80003ca <clamp_amber>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fa5e 	bl	8000c78 <displayNumber1>

        if (timer0_flag) {
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <fsm_auto_run+0x444>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d033      	beq.n	800082c <fsm_auto_run+0x438>
            state = GREEN_RED;
 80007c4:	4b22      	ldr	r3, [pc, #136]	; (8000850 <fsm_auto_run+0x45c>)
 80007c6:	2202      	movs	r2, #2
 80007c8:	601a      	str	r2, [r3, #0]
            entry_GR = 1;
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <fsm_auto_run+0x468>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
        }
        break;
 80007d0:	e02c      	b.n	800082c <fsm_auto_run+0x438>

    case NOT_AUTO:
        HAL_GPIO_WritePin(LED_RED0_GPIO_Port,    LED_RED0_Pin,    GPIO_PIN_SET);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2120      	movs	r1, #32
 80007d6:	4822      	ldr	r0, [pc, #136]	; (8000860 <fsm_auto_run+0x46c>)
 80007d8:	f001 f921 	bl	8001a1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port,  LED_GREEN0_Pin,  GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2180      	movs	r1, #128	; 0x80
 80007e0:	481f      	ldr	r0, [pc, #124]	; (8000860 <fsm_auto_run+0x46c>)
 80007e2:	f001 f91c 	bl	8001a1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_YELLOW0_GPIO_Port, LED_YELLOW0_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2140      	movs	r1, #64	; 0x40
 80007ea:	481d      	ldr	r0, [pc, #116]	; (8000860 <fsm_auto_run+0x46c>)
 80007ec:	f001 f917 	bl	8001a1e <HAL_GPIO_WritePin>

        HAL_GPIO_WritePin(LED_RED1_GPIO_Port,    LED_RED1_Pin,    GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f6:	481a      	ldr	r0, [pc, #104]	; (8000860 <fsm_auto_run+0x46c>)
 80007f8:	f001 f911 	bl	8001a1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port,  LED_GREEN1_Pin,  GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <fsm_auto_run+0x46c>)
 8000804:	f001 f90b 	bl	8001a1e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000808:	2201      	movs	r2, #1
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	4814      	ldr	r0, [pc, #80]	; (8000860 <fsm_auto_run+0x46c>)
 8000810:	f001 f905 	bl	8001a1e <HAL_GPIO_WritePin>

        state = NOTHING;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <fsm_auto_run+0x45c>)
 8000816:	2207      	movs	r2, #7
 8000818:	601a      	str	r2, [r3, #0]
        break;
 800081a:	e008      	b.n	800082e <fsm_auto_run+0x43a>

    default:
        break;
 800081c:	bf00      	nop
 800081e:	e006      	b.n	800082e <fsm_auto_run+0x43a>
        break;
 8000820:	bf00      	nop
 8000822:	e004      	b.n	800082e <fsm_auto_run+0x43a>
        break;
 8000824:	bf00      	nop
 8000826:	e002      	b.n	800082e <fsm_auto_run+0x43a>
        break;
 8000828:	bf00      	nop
 800082a:	e000      	b.n	800082e <fsm_auto_run+0x43a>
        break;
 800082c:	bf00      	nop
    }
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	2000004c 	.word	0x2000004c
 8000838:	200000d8 	.word	0x200000d8
 800083c:	200000f0 	.word	0x200000f0
 8000840:	20000040 	.word	0x20000040
 8000844:	200000f8 	.word	0x200000f8
 8000848:	20000044 	.word	0x20000044
 800084c:	200000fc 	.word	0x200000fc
 8000850:	200000bc 	.word	0x200000bc
 8000854:	20000048 	.word	0x20000048
 8000858:	20000100 	.word	0x20000100
 800085c:	20000054 	.word	0x20000054
 8000860:	40010800 	.word	0x40010800

08000864 <modeRun>:
int tempGreen= 8;

int in_man=0;
int boost=0;

void modeRun(){
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	if(isButtonPressed0()==1){
 8000868:	f7ff fc70 	bl	800014c <isButtonPressed0>
 800086c:	4603      	mov	r3, r0
 800086e:	2b01      	cmp	r3, #1
 8000870:	d115      	bne.n	800089e <modeRun+0x3a>
		mode_sw++;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <modeRun+0x40>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	3301      	adds	r3, #1
 8000878:	4a0a      	ldr	r2, [pc, #40]	; (80008a4 <modeRun+0x40>)
 800087a:	6013      	str	r3, [r2, #0]
		if(mode_sw>=4){
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <modeRun+0x40>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b03      	cmp	r3, #3
 8000882:	dd02      	ble.n	800088a <modeRun+0x26>
			mode_sw=0;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <modeRun+0x40>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
		}
		mode_choose= mode_arr[mode_sw];
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <modeRun+0x40>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <modeRun+0x44>)
 8000890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <modeRun+0x48>)
 8000896:	6013      	str	r3, [r2, #0]
		boost=0;
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <modeRun+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
	}
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000c4 	.word	0x200000c4
 80008a8:	20000058 	.word	0x20000058
 80008ac:	200000c0 	.word	0x200000c0
 80008b0:	200000cc 	.word	0x200000cc

080008b4 <fsm_man_run>:


void fsm_man_run(){
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

	if (!in_man && mode_choose == AUTO_MODE) return;
 80008b8:	4ba2      	ldr	r3, [pc, #648]	; (8000b44 <fsm_man_run+0x290>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d104      	bne.n	80008ca <fsm_man_run+0x16>
 80008c0:	4ba1      	ldr	r3, [pc, #644]	; (8000b48 <fsm_man_run+0x294>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b0e      	cmp	r3, #14
 80008c6:	f000 8135 	beq.w	8000b34 <fsm_man_run+0x280>
	switch (mode_choose) {
 80008ca:	4b9f      	ldr	r3, [pc, #636]	; (8000b48 <fsm_man_run+0x294>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	3b0a      	subs	r3, #10
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	f200 8131 	bhi.w	8000b38 <fsm_man_run+0x284>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <fsm_man_run+0x28>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	080008ed 	.word	0x080008ed
 80008e0:	0800090b 	.word	0x0800090b
 80008e4:	080009db 	.word	0x080009db
 80008e8:	08000a89 	.word	0x08000a89
		case MODE1:
			if(in_man==1){
 80008ec:	4b95      	ldr	r3, [pc, #596]	; (8000b44 <fsm_man_run+0x290>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	f040 8123 	bne.w	8000b3c <fsm_man_run+0x288>
			mode_choose= AUTO_MODE;
 80008f6:	4b94      	ldr	r3, [pc, #592]	; (8000b48 <fsm_man_run+0x294>)
 80008f8:	220e      	movs	r2, #14
 80008fa:	601a      	str	r2, [r3, #0]
			state= INIT;
 80008fc:	4b93      	ldr	r3, [pc, #588]	; (8000b4c <fsm_man_run+0x298>)
 80008fe:	2201      	movs	r2, #1
 8000900:	601a      	str	r2, [r3, #0]
			in_man=0;
 8000902:	4b90      	ldr	r3, [pc, #576]	; (8000b44 <fsm_man_run+0x290>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
			}
			break;
 8000908:	e118      	b.n	8000b3c <fsm_man_run+0x288>
		case MODE2:
			if(boost==0){
 800090a:	4b91      	ldr	r3, [pc, #580]	; (8000b50 <fsm_man_run+0x29c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d108      	bne.n	8000924 <fsm_man_run+0x70>
				state= NOT_AUTO;
 8000912:	4b8e      	ldr	r3, [pc, #568]	; (8000b4c <fsm_man_run+0x298>)
 8000914:	2206      	movs	r2, #6
 8000916:	601a      	str	r2, [r3, #0]
				boost=1;
 8000918:	4b8d      	ldr	r3, [pc, #564]	; (8000b50 <fsm_man_run+0x29c>)
 800091a:	2201      	movs	r2, #1
 800091c:	601a      	str	r2, [r3, #0]
				in_man=1;
 800091e:	4b89      	ldr	r3, [pc, #548]	; (8000b44 <fsm_man_run+0x290>)
 8000920:	2201      	movs	r2, #1
 8000922:	601a      	str	r2, [r3, #0]
			}
			if(timer3_flag==1){
 8000924:	4b8b      	ldr	r3, [pc, #556]	; (8000b54 <fsm_man_run+0x2a0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d10f      	bne.n	800094c <fsm_man_run+0x98>
				timer3_flag=0;
 800092c:	4b89      	ldr	r3, [pc, #548]	; (8000b54 <fsm_man_run+0x2a0>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
				set_timer3(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000936:	f000 fcfd 	bl	8001334 <set_timer3>
				HAL_GPIO_TogglePin(LED_RED0_GPIO_Port, LED_RED0_Pin );
 800093a:	2120      	movs	r1, #32
 800093c:	4886      	ldr	r0, [pc, #536]	; (8000b58 <fsm_man_run+0x2a4>)
 800093e:	f001 f886 	bl	8001a4e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin );
 8000942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000946:	4884      	ldr	r0, [pc, #528]	; (8000b58 <fsm_man_run+0x2a4>)
 8000948:	f001 f881 	bl	8001a4e <HAL_GPIO_TogglePin>
			}

			if(isButtonPressed1()==1){
 800094c:	f7ff fc64 	bl	8000218 <isButtonPressed1>
 8000950:	4603      	mov	r3, r0
 8000952:	2b01      	cmp	r3, #1
 8000954:	d10c      	bne.n	8000970 <fsm_man_run+0xbc>
				if(tempRed<99)
 8000956:	4b81      	ldr	r3, [pc, #516]	; (8000b5c <fsm_man_run+0x2a8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b62      	cmp	r3, #98	; 0x62
 800095c:	dc05      	bgt.n	800096a <fsm_man_run+0xb6>
				tempRed++;
 800095e:	4b7f      	ldr	r3, [pc, #508]	; (8000b5c <fsm_man_run+0x2a8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	4a7d      	ldr	r2, [pc, #500]	; (8000b5c <fsm_man_run+0x2a8>)
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e002      	b.n	8000970 <fsm_man_run+0xbc>
				else tempRed=1;
 800096a:	4b7c      	ldr	r3, [pc, #496]	; (8000b5c <fsm_man_run+0x2a8>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]

			}
			displayNumber0(2);
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f93f 	bl	8000bf4 <displayNumber0>
			displayNumber1(tempRed);
 8000976:	4b79      	ldr	r3, [pc, #484]	; (8000b5c <fsm_man_run+0x2a8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f97c 	bl	8000c78 <displayNumber1>
			if(isButtonPressed2()==1){
 8000980:	f7ff fcb0 	bl	80002e4 <isButtonPressed2>
 8000984:	4603      	mov	r3, r0
 8000986:	2b01      	cmp	r3, #1
 8000988:	f040 80da 	bne.w	8000b40 <fsm_man_run+0x28c>
				init_numRed= tempRed;
 800098c:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <fsm_man_run+0x2a8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a73      	ldr	r2, [pc, #460]	; (8000b60 <fsm_man_run+0x2ac>)
 8000992:	6013      	str	r3, [r2, #0]
				mode_choose= MODE1;
 8000994:	4b6c      	ldr	r3, [pc, #432]	; (8000b48 <fsm_man_run+0x294>)
 8000996:	220a      	movs	r2, #10
 8000998:	601a      	str	r2, [r3, #0]
				mode_sw=0;
 800099a:	4b72      	ldr	r3, [pc, #456]	; (8000b64 <fsm_man_run+0x2b0>)
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
				if(init_numRed- init_numAmber>0){
 80009a0:	4b6f      	ldr	r3, [pc, #444]	; (8000b60 <fsm_man_run+0x2ac>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b70      	ldr	r3, [pc, #448]	; (8000b68 <fsm_man_run+0x2b4>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dd0b      	ble.n	80009c6 <fsm_man_run+0x112>
				init_numGreen = init_numRed- init_numAmber;
 80009ae:	4b6c      	ldr	r3, [pc, #432]	; (8000b60 <fsm_man_run+0x2ac>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b6d      	ldr	r3, [pc, #436]	; (8000b68 <fsm_man_run+0x2b4>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	4a6c      	ldr	r2, [pc, #432]	; (8000b6c <fsm_man_run+0x2b8>)
 80009ba:	6013      	str	r3, [r2, #0]
				tempGreen= init_numGreen;
 80009bc:	4b6b      	ldr	r3, [pc, #428]	; (8000b6c <fsm_man_run+0x2b8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a6b      	ldr	r2, [pc, #428]	; (8000b70 <fsm_man_run+0x2bc>)
 80009c2:	6013      	str	r3, [r2, #0]
					init_numRed=10;
					init_numGreen=8;
					init_numAmber=2;
				}
			}
			break;
 80009c4:	e0bc      	b.n	8000b40 <fsm_man_run+0x28c>
					init_numRed=10;
 80009c6:	4b66      	ldr	r3, [pc, #408]	; (8000b60 <fsm_man_run+0x2ac>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	601a      	str	r2, [r3, #0]
					init_numGreen=8;
 80009cc:	4b67      	ldr	r3, [pc, #412]	; (8000b6c <fsm_man_run+0x2b8>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	601a      	str	r2, [r3, #0]
					init_numAmber=2;
 80009d2:	4b65      	ldr	r3, [pc, #404]	; (8000b68 <fsm_man_run+0x2b4>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	601a      	str	r2, [r3, #0]
			break;
 80009d8:	e0b2      	b.n	8000b40 <fsm_man_run+0x28c>
		case MODE3:

			if(boost==0){
 80009da:	4b5d      	ldr	r3, [pc, #372]	; (8000b50 <fsm_man_run+0x29c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d108      	bne.n	80009f4 <fsm_man_run+0x140>
				state= NOT_AUTO;
 80009e2:	4b5a      	ldr	r3, [pc, #360]	; (8000b4c <fsm_man_run+0x298>)
 80009e4:	2206      	movs	r2, #6
 80009e6:	601a      	str	r2, [r3, #0]
				boost=1;
 80009e8:	4b59      	ldr	r3, [pc, #356]	; (8000b50 <fsm_man_run+0x29c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
				in_man=1;
 80009ee:	4b55      	ldr	r3, [pc, #340]	; (8000b44 <fsm_man_run+0x290>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
			}
			if(timer3_flag==1){
 80009f4:	4b57      	ldr	r3, [pc, #348]	; (8000b54 <fsm_man_run+0x2a0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d10f      	bne.n	8000a1c <fsm_man_run+0x168>
				timer3_flag=0;
 80009fc:	4b55      	ldr	r3, [pc, #340]	; (8000b54 <fsm_man_run+0x2a0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
				set_timer3(500);
 8000a02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a06:	f000 fc95 	bl	8001334 <set_timer3>
				HAL_GPIO_TogglePin(LED_YELLOW0_GPIO_Port, LED_YELLOW0_Pin );
 8000a0a:	2140      	movs	r1, #64	; 0x40
 8000a0c:	4852      	ldr	r0, [pc, #328]	; (8000b58 <fsm_man_run+0x2a4>)
 8000a0e:	f001 f81e 	bl	8001a4e <HAL_GPIO_TogglePin>
			    HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin );
 8000a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a16:	4850      	ldr	r0, [pc, #320]	; (8000b58 <fsm_man_run+0x2a4>)
 8000a18:	f001 f819 	bl	8001a4e <HAL_GPIO_TogglePin>
			}

			if(isButtonPressed1()==1){
 8000a1c:	f7ff fbfc 	bl	8000218 <isButtonPressed1>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10c      	bne.n	8000a40 <fsm_man_run+0x18c>
				if(tempAmber<99)
 8000a26:	4b53      	ldr	r3, [pc, #332]	; (8000b74 <fsm_man_run+0x2c0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b62      	cmp	r3, #98	; 0x62
 8000a2c:	dc05      	bgt.n	8000a3a <fsm_man_run+0x186>
				tempAmber++;
 8000a2e:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <fsm_man_run+0x2c0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a4f      	ldr	r2, [pc, #316]	; (8000b74 <fsm_man_run+0x2c0>)
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	e002      	b.n	8000a40 <fsm_man_run+0x18c>
				else tempAmber=1;
 8000a3a:	4b4e      	ldr	r3, [pc, #312]	; (8000b74 <fsm_man_run+0x2c0>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
			}

			displayNumber0(3);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f8d7 	bl	8000bf4 <displayNumber0>
			displayNumber1(tempAmber);
 8000a46:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <fsm_man_run+0x2c0>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f914 	bl	8000c78 <displayNumber1>

			if(isButtonPressed2()==1){
 8000a50:	f7ff fc48 	bl	80002e4 <isButtonPressed2>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	f040 808e 	bne.w	8000b78 <fsm_man_run+0x2c4>
				init_numAmber= tempAmber;
 8000a5c:	4b45      	ldr	r3, [pc, #276]	; (8000b74 <fsm_man_run+0x2c0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a41      	ldr	r2, [pc, #260]	; (8000b68 <fsm_man_run+0x2b4>)
 8000a62:	6013      	str	r3, [r2, #0]
				mode_choose= MODE1;
 8000a64:	4b38      	ldr	r3, [pc, #224]	; (8000b48 <fsm_man_run+0x294>)
 8000a66:	220a      	movs	r2, #10
 8000a68:	601a      	str	r2, [r3, #0]
				mode_sw=0;
 8000a6a:	4b3e      	ldr	r3, [pc, #248]	; (8000b64 <fsm_man_run+0x2b0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
				init_numRed= init_numAmber+ init_numGreen;
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <fsm_man_run+0x2b4>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <fsm_man_run+0x2b8>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a39      	ldr	r2, [pc, #228]	; (8000b60 <fsm_man_run+0x2ac>)
 8000a7c:	6013      	str	r3, [r2, #0]
				tempRed= init_numRed;
 8000a7e:	4b38      	ldr	r3, [pc, #224]	; (8000b60 <fsm_man_run+0x2ac>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a36      	ldr	r2, [pc, #216]	; (8000b5c <fsm_man_run+0x2a8>)
 8000a84:	6013      	str	r3, [r2, #0]
			}
			break;
 8000a86:	e077      	b.n	8000b78 <fsm_man_run+0x2c4>
		case MODE4:

			if(boost==0){
 8000a88:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <fsm_man_run+0x29c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d108      	bne.n	8000aa2 <fsm_man_run+0x1ee>
				state= NOT_AUTO;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <fsm_man_run+0x298>)
 8000a92:	2206      	movs	r2, #6
 8000a94:	601a      	str	r2, [r3, #0]
				boost=1;
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <fsm_man_run+0x29c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
				in_man=1;
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <fsm_man_run+0x290>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	601a      	str	r2, [r3, #0]
			}
			if(timer3_flag==1){
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <fsm_man_run+0x2a0>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10f      	bne.n	8000aca <fsm_man_run+0x216>
				timer3_flag=0;
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <fsm_man_run+0x2a0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
				set_timer3(500);
 8000ab0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab4:	f000 fc3e 	bl	8001334 <set_timer3>
				HAL_GPIO_TogglePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin );
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	4827      	ldr	r0, [pc, #156]	; (8000b58 <fsm_man_run+0x2a4>)
 8000abc:	f000 ffc7 	bl	8001a4e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin );
 8000ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac4:	4824      	ldr	r0, [pc, #144]	; (8000b58 <fsm_man_run+0x2a4>)
 8000ac6:	f000 ffc2 	bl	8001a4e <HAL_GPIO_TogglePin>
			}

			if(isButtonPressed1()==1){
 8000aca:	f7ff fba5 	bl	8000218 <isButtonPressed1>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10c      	bne.n	8000aee <fsm_man_run+0x23a>
				if(tempGreen<99)
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <fsm_man_run+0x2bc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b62      	cmp	r3, #98	; 0x62
 8000ada:	dc05      	bgt.n	8000ae8 <fsm_man_run+0x234>
				tempGreen++;
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <fsm_man_run+0x2bc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	4a23      	ldr	r2, [pc, #140]	; (8000b70 <fsm_man_run+0x2bc>)
 8000ae4:	6013      	str	r3, [r2, #0]
 8000ae6:	e002      	b.n	8000aee <fsm_man_run+0x23a>
				else tempGreen=1;
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <fsm_man_run+0x2bc>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	601a      	str	r2, [r3, #0]
			}

			displayNumber0(4);
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 f880 	bl	8000bf4 <displayNumber0>
			displayNumber1(tempGreen);
 8000af4:	4b1e      	ldr	r3, [pc, #120]	; (8000b70 <fsm_man_run+0x2bc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f000 f8bd 	bl	8000c78 <displayNumber1>

			if(isButtonPressed2()==1){
 8000afe:	f7ff fbf1 	bl	80002e4 <isButtonPressed2>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d139      	bne.n	8000b7c <fsm_man_run+0x2c8>
				init_numGreen= tempGreen;
 8000b08:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <fsm_man_run+0x2bc>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <fsm_man_run+0x2b8>)
 8000b0e:	6013      	str	r3, [r2, #0]
				mode_choose= MODE1;
 8000b10:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <fsm_man_run+0x294>)
 8000b12:	220a      	movs	r2, #10
 8000b14:	601a      	str	r2, [r3, #0]
				mode_sw=0;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <fsm_man_run+0x2b0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
				init_numRed= init_numAmber+ init_numGreen;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <fsm_man_run+0x2b4>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <fsm_man_run+0x2b8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4413      	add	r3, r2
 8000b26:	4a0e      	ldr	r2, [pc, #56]	; (8000b60 <fsm_man_run+0x2ac>)
 8000b28:	6013      	str	r3, [r2, #0]
				tempRed= init_numRed;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <fsm_man_run+0x2ac>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <fsm_man_run+0x2a8>)
 8000b30:	6013      	str	r3, [r2, #0]
			}

			break;
 8000b32:	e023      	b.n	8000b7c <fsm_man_run+0x2c8>
	if (!in_man && mode_choose == AUTO_MODE) return;
 8000b34:	bf00      	nop
 8000b36:	e022      	b.n	8000b7e <fsm_man_run+0x2ca>
		default:
			break;
 8000b38:	bf00      	nop
 8000b3a:	e020      	b.n	8000b7e <fsm_man_run+0x2ca>
			break;
 8000b3c:	bf00      	nop
 8000b3e:	e01e      	b.n	8000b7e <fsm_man_run+0x2ca>
			break;
 8000b40:	bf00      	nop
 8000b42:	e01c      	b.n	8000b7e <fsm_man_run+0x2ca>
 8000b44:	200000c8 	.word	0x200000c8
 8000b48:	200000c0 	.word	0x200000c0
 8000b4c:	200000bc 	.word	0x200000bc
 8000b50:	200000cc 	.word	0x200000cc
 8000b54:	200000f0 	.word	0x200000f0
 8000b58:	40010800 	.word	0x40010800
 8000b5c:	20000068 	.word	0x20000068
 8000b60:	2000003c 	.word	0x2000003c
 8000b64:	200000c4 	.word	0x200000c4
 8000b68:	20000044 	.word	0x20000044
 8000b6c:	20000040 	.word	0x20000040
 8000b70:	20000070 	.word	0x20000070
 8000b74:	2000006c 	.word	0x2000006c
			break;
 8000b78:	bf00      	nop
 8000b7a:	e000      	b.n	8000b7e <fsm_man_run+0x2ca>
			break;
 8000b7c:	bf00      	nop
	}
}
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <display7SEG>:
    0b1111000, // 7
    0b0000000, // 8
    0b0010000 // 9
};

void display7SEG(int num){
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    uint8_t n = table[num] & 0x7F;
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <display7SEG+0x30>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b94:	73fb      	strb	r3, [r7, #15]
    GPIOB->ODR = (GPIOB->ODR & ~(0x7F)) | n;
 8000b96:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <display7SEG+0x34>)
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <display7SEG+0x34>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	60cb      	str	r3, [r1, #12]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000074 	.word	0x20000074
 8000bb4:	40010c00 	.word	0x40010c00

08000bb8 <display7SEG2>:

void display7SEG2(int num){
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
    uint8_t n = table[num] & 0x7F;
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <display7SEG2+0x34>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bcc:	73fb      	strb	r3, [r7, #15]
    GPIOB->ODR = (GPIOB->ODR & ~(0x7F << 7)) | (n << 7);
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <display7SEG2+0x38>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	f423 537e 	bic.w	r3, r3, #16256	; 0x3f80
 8000bd6:	7bfa      	ldrb	r2, [r7, #15]
 8000bd8:	01d2      	lsls	r2, r2, #7
 8000bda:	4611      	mov	r1, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <display7SEG2+0x38>)
 8000bde:	430b      	orrs	r3, r1
 8000be0:	60d3      	str	r3, [r2, #12]
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	20000074 	.word	0x20000074
 8000bf0:	40010c00 	.word	0x40010c00

08000bf4 <displayNumber0>:

void displayNumber0(int num){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
	int num1= num /10;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <displayNumber0+0x78>)
 8000c00:	fb82 1203 	smull	r1, r2, r2, r3
 8000c04:	1092      	asrs	r2, r2, #2
 8000c06:	17db      	asrs	r3, r3, #31
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	60fb      	str	r3, [r7, #12]
	int num2= num %10;
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <displayNumber0+0x78>)
 8000c10:	fb83 1302 	smull	r1, r3, r3, r2
 8000c14:	1099      	asrs	r1, r3, #2
 8000c16:	17d3      	asrs	r3, r2, #31
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	60bb      	str	r3, [r7, #8]

	if(sw==0){
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <displayNumber0+0x7c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10d      	bne.n	8000c4a <displayNumber0+0x56>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2102      	movs	r1, #2
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <displayNumber0+0x80>)
 8000c34:	f000 fef3 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2104      	movs	r1, #4
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <displayNumber0+0x80>)
 8000c3e:	f000 feee 	bl	8001a1e <HAL_GPIO_WritePin>
		display7SEG(num1);
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff ff9c 	bl	8000b80 <display7SEG>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
		display7SEG(num2);
	}

}
 8000c48:	e00c      	b.n	8000c64 <displayNumber0+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2102      	movs	r1, #2
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <displayNumber0+0x80>)
 8000c50:	f000 fee5 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2104      	movs	r1, #4
 8000c58:	4806      	ldr	r0, [pc, #24]	; (8000c74 <displayNumber0+0x80>)
 8000c5a:	f000 fee0 	bl	8001a1e <HAL_GPIO_WritePin>
		display7SEG(num2);
 8000c5e:	68b8      	ldr	r0, [r7, #8]
 8000c60:	f7ff ff8e 	bl	8000b80 <display7SEG>
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	66666667 	.word	0x66666667
 8000c70:	200000d0 	.word	0x200000d0
 8000c74:	40010800 	.word	0x40010800

08000c78 <displayNumber1>:

void displayNumber1(int num){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	int num1= num /10;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a1b      	ldr	r2, [pc, #108]	; (8000cf0 <displayNumber1+0x78>)
 8000c84:	fb82 1203 	smull	r1, r2, r2, r3
 8000c88:	1092      	asrs	r2, r2, #2
 8000c8a:	17db      	asrs	r3, r3, #31
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	60fb      	str	r3, [r7, #12]
	int num2= num %10;
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <displayNumber1+0x78>)
 8000c94:	fb83 1302 	smull	r1, r3, r3, r2
 8000c98:	1099      	asrs	r1, r3, #2
 8000c9a:	17d3      	asrs	r3, r2, #31
 8000c9c:	1ac9      	subs	r1, r1, r3
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	60bb      	str	r3, [r7, #8]

	if(sw==0){
 8000caa:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <displayNumber1+0x7c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10d      	bne.n	8000cce <displayNumber1+0x56>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	4810      	ldr	r0, [pc, #64]	; (8000cf8 <displayNumber1+0x80>)
 8000cb8:	f000 feb1 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2110      	movs	r1, #16
 8000cc0:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <displayNumber1+0x80>)
 8000cc2:	f000 feac 	bl	8001a1e <HAL_GPIO_WritePin>
		display7SEG2(num1);
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff ff76 	bl	8000bb8 <display7SEG2>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
		display7SEG2(num2);
	}

}
 8000ccc:	e00c      	b.n	8000ce8 <displayNumber1+0x70>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	4809      	ldr	r0, [pc, #36]	; (8000cf8 <displayNumber1+0x80>)
 8000cd4:	f000 fea3 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2110      	movs	r1, #16
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <displayNumber1+0x80>)
 8000cde:	f000 fe9e 	bl	8001a1e <HAL_GPIO_WritePin>
		display7SEG2(num2);
 8000ce2:	68b8      	ldr	r0, [r7, #8]
 8000ce4:	f7ff ff68 	bl	8000bb8 <display7SEG2>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	66666667 	.word	0x66666667
 8000cf4:	200000d0 	.word	0x200000d0
 8000cf8:	40010800 	.word	0x40010800

08000cfc <LED_monitor>:

void LED_monitor(int num){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	switch(num){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d029      	beq.n	8000d5e <LED_monitor+0x62>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	dc36      	bgt.n	8000d7e <LED_monitor+0x82>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <LED_monitor+0x22>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d010      	beq.n	8000d3e <LED_monitor+0x42>
 8000d1c:	e02f      	b.n	8000d7e <LED_monitor+0x82>
	case GREEN :
		HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, GPIO_PIN_SET);
 8000d1e:	2201      	movs	r2, #1
 8000d20:	2120      	movs	r1, #32
 8000d22:	4822      	ldr	r0, [pc, #136]	; (8000dac <LED_monitor+0xb0>)
 8000d24:	f000 fe7b 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, GPIO_PIN_RESET);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	481f      	ldr	r0, [pc, #124]	; (8000dac <LED_monitor+0xb0>)
 8000d2e:	f000 fe76 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW0_GPIO_Port, LED_YELLOW0_Pin, GPIO_PIN_SET);
 8000d32:	2201      	movs	r2, #1
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	481d      	ldr	r0, [pc, #116]	; (8000dac <LED_monitor+0xb0>)
 8000d38:	f000 fe71 	bl	8001a1e <HAL_GPIO_WritePin>
		break;
 8000d3c:	e032      	b.n	8000da4 <LED_monitor+0xa8>
	case YELLOW :
		HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2120      	movs	r1, #32
 8000d42:	481a      	ldr	r0, [pc, #104]	; (8000dac <LED_monitor+0xb0>)
 8000d44:	f000 fe6b 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	4817      	ldr	r0, [pc, #92]	; (8000dac <LED_monitor+0xb0>)
 8000d4e:	f000 fe66 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW0_GPIO_Port, LED_YELLOW0_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2140      	movs	r1, #64	; 0x40
 8000d56:	4815      	ldr	r0, [pc, #84]	; (8000dac <LED_monitor+0xb0>)
 8000d58:	f000 fe61 	bl	8001a1e <HAL_GPIO_WritePin>
		break;
 8000d5c:	e022      	b.n	8000da4 <LED_monitor+0xa8>
	case RED :
		HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2120      	movs	r1, #32
 8000d62:	4812      	ldr	r0, [pc, #72]	; (8000dac <LED_monitor+0xb0>)
 8000d64:	f000 fe5b 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <LED_monitor+0xb0>)
 8000d6e:	f000 fe56 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW0_GPIO_Port, LED_YELLOW0_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2140      	movs	r1, #64	; 0x40
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <LED_monitor+0xb0>)
 8000d78:	f000 fe51 	bl	8001a1e <HAL_GPIO_WritePin>
		break;
 8000d7c:	e012      	b.n	8000da4 <LED_monitor+0xa8>
	default :
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <LED_monitor+0xb0>)
 8000d86:	f000 fe4a 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d90:	4806      	ldr	r0, [pc, #24]	; (8000dac <LED_monitor+0xb0>)
 8000d92:	f000 fe44 	bl	8001a1e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LED_monitor+0xb0>)
 8000d9e:	f000 fe3e 	bl	8001a1e <HAL_GPIO_WritePin>
		break;
 8000da2:	bf00      	nop
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40010800 	.word	0x40010800

08000db0 <LED_monitor2>:


void LED_monitor2(int num){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	switch(num){
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d02f      	beq.n	8000e1e <LED_monitor2+0x6e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	dc3f      	bgt.n	8000e44 <LED_monitor2+0x94>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <LED_monitor2+0x22>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d013      	beq.n	8000df8 <LED_monitor2+0x48>
 8000dd0:	e038      	b.n	8000e44 <LED_monitor2+0x94>
		case GREEN :
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <LED_monitor2+0xc4>)
 8000dda:	f000 fe20 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <LED_monitor2+0xc4>)
 8000de6:	f000 fe1a 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df0:	4820      	ldr	r0, [pc, #128]	; (8000e74 <LED_monitor2+0xc4>)
 8000df2:	f000 fe14 	bl	8001a1e <HAL_GPIO_WritePin>
			break;
 8000df6:	e038      	b.n	8000e6a <LED_monitor2+0xba>
		case YELLOW :
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfe:	481d      	ldr	r0, [pc, #116]	; (8000e74 <LED_monitor2+0xc4>)
 8000e00:	f000 fe0d 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <LED_monitor2+0xc4>)
 8000e0c:	f000 fe07 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_RESET);
 8000e10:	2200      	movs	r2, #0
 8000e12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e16:	4817      	ldr	r0, [pc, #92]	; (8000e74 <LED_monitor2+0xc4>)
 8000e18:	f000 fe01 	bl	8001a1e <HAL_GPIO_WritePin>
			break;
 8000e1c:	e025      	b.n	8000e6a <LED_monitor2+0xba>
		case RED :
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	4813      	ldr	r0, [pc, #76]	; (8000e74 <LED_monitor2+0xc4>)
 8000e26:	f000 fdfa 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e30:	4810      	ldr	r0, [pc, #64]	; (8000e74 <LED_monitor2+0xc4>)
 8000e32:	f000 fdf4 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LED_monitor2+0xc4>)
 8000e3e:	f000 fdee 	bl	8001a1e <HAL_GPIO_WritePin>
			break;
 8000e42:	e012      	b.n	8000e6a <LED_monitor2+0xba>
		default :
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <LED_monitor2+0xc4>)
 8000e4c:	f000 fde7 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e56:	4807      	ldr	r0, [pc, #28]	; (8000e74 <LED_monitor2+0xc4>)
 8000e58:	f000 fde1 	bl	8001a1e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e62:	4804      	ldr	r0, [pc, #16]	; (8000e74 <LED_monitor2+0xc4>)
 8000e64:	f000 fddb 	bl	8001a1e <HAL_GPIO_WritePin>
			break;
 8000e68:	bf00      	nop
		}
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010800 	.word	0x40010800

08000e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7c:	f000 face 	bl	800141c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e80:	f000 f81a 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e84:	f000 f8a0 	bl	8000fc8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e88:	f000 f852 	bl	8000f30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e8c:	4808      	ldr	r0, [pc, #32]	; (8000eb0 <main+0x38>)
 8000e8e:	f001 fa23 	bl	80022d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  state=INIT;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <main+0x3c>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
  set_timer2(250);
 8000e98:	20fa      	movs	r0, #250	; 0xfa
 8000e9a:	f000 fa17 	bl	80012cc <set_timer2>
  set_timer3(500);
 8000e9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ea2:	f000 fa47 	bl	8001334 <set_timer3>
  while (1)
  {
	 fsm_man_run();
 8000ea6:	f7ff fd05 	bl	80008b4 <fsm_man_run>
	 fsm_auto_run();
 8000eaa:	f7ff faa3 	bl	80003f4 <fsm_auto_run>
	 fsm_man_run();
 8000eae:	e7fa      	b.n	8000ea6 <main+0x2e>
 8000eb0:	20000104 	.word	0x20000104
 8000eb4:	200000bc 	.word	0x200000bc

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b090      	sub	sp, #64	; 0x40
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	2228      	movs	r2, #40	; 0x28
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fdb6 	bl	8002a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2310      	movs	r3, #16
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0318 	add.w	r3, r7, #24
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fdc6 	bl	8001a80 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000efa:	f000 f905 	bl	8001108 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f001 f832 	bl	8001f80 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f22:	f000 f8f1 	bl	8001108 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3740      	adds	r7, #64	; 0x40
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f64:	2209      	movs	r2, #9
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f76:	f001 f95f 	bl	8002238 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f80:	f000 f8c2 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f92:	f001 fadd 	bl	8002550 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 f8b4 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000fae:	f001 fcb5 	bl	800291c <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 f8a6 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000104 	.word	0x20000104

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fdc:	4b2f      	ldr	r3, [pc, #188]	; (800109c <MX_GPIO_Init+0xd4>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <MX_GPIO_Init+0xd4>)
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	6193      	str	r3, [r2, #24]
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_GPIO_Init+0xd4>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	f003 0310 	and.w	r3, r3, #16
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_GPIO_Init+0xd4>)
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	4a28      	ldr	r2, [pc, #160]	; (800109c <MX_GPIO_Init+0xd4>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	6193      	str	r3, [r2, #24]
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_GPIO_Init+0xd4>)
 8001002:	699b      	ldr	r3, [r3, #24]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_GPIO_Init+0xd4>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a22      	ldr	r2, [pc, #136]	; (800109c <MX_GPIO_Init+0xd4>)
 8001012:	f043 0308 	orr.w	r3, r3, #8
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_GPIO_Init+0xd4>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001024:	2200      	movs	r2, #0
 8001026:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800102a:	481d      	ldr	r0, [pc, #116]	; (80010a0 <MX_GPIO_Init+0xd8>)
 800102c:	f000 fcf7 	bl	8001a1e <HAL_GPIO_WritePin>
                          |LED_RED0_Pin|LED_YELLOW0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001030:	2200      	movs	r2, #0
 8001032:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8001036:	481b      	ldr	r0, [pc, #108]	; (80010a4 <MX_GPIO_Init+0xdc>)
 8001038:	f000 fcf1 	bl	8001a1e <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800103c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001040:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	4815      	ldr	r0, [pc, #84]	; (80010a8 <MX_GPIO_Init+0xe0>)
 8001052:	f000 fb53 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           LED_RED0_Pin LED_YELLOW0_Pin LED_GREEN0_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001056:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800105a:	613b      	str	r3, [r7, #16]
                          |LED_RED0_Pin|LED_YELLOW0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2302      	movs	r3, #2
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4619      	mov	r1, r3
 800106e:	480c      	ldr	r0, [pc, #48]	; (80010a0 <MX_GPIO_Init+0xd8>)
 8001070:	f000 fb44 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001074:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001078:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2302      	movs	r3, #2
 8001084:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_GPIO_Init+0xdc>)
 800108e:	f000 fb35 	bl	80016fc <HAL_GPIO_Init>

}
 8001092:	bf00      	nop
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40011000 	.word	0x40011000

080010ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	timer0_run();
 80010b4:	f000 f8d6 	bl	8001264 <timer0_run>
	timer1_run();
 80010b8:	f000 f8ee 	bl	8001298 <timer1_run>
	timer2_run();
 80010bc:	f000 f920 	bl	8001300 <timer2_run>
	timer3_run();
 80010c0:	f000 f952 	bl	8001368 <timer3_run>
	if(timer2_flag==1) {
 80010c4:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10b      	bne.n	80010e4 <HAL_TIM_PeriodElapsedCallback+0x38>
		sw = 1-sw;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1c3 0301 	rsb	r3, r3, #1
 80010d4:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80010d6:	6013      	str	r3, [r2, #0]
		timer2_flag=0;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
		set_timer2(250);
 80010de:	20fa      	movs	r0, #250	; 0xfa
 80010e0:	f000 f8f4 	bl	80012cc <set_timer2>
	}
	one_sec_run();
 80010e4:	f000 f95a 	bl	800139c <one_sec_run>

	getKeyInput0();
 80010e8:	f7ff f842 	bl	8000170 <getKeyInput0>
	getKeyInput1();
 80010ec:	f7ff f8a6 	bl	800023c <getKeyInput1>
	getKeyInput2();
 80010f0:	f7ff f90a 	bl	8000308 <getKeyInput2>

	modeRun();
 80010f4:	f7ff fbb6 	bl	8000864 <modeRun>



}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	200000e8 	.word	0x200000e8
 8001104:	200000d0 	.word	0x200000d0

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_MspInit+0x5c>)
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4a14      	ldr	r2, [pc, #80]	; (8001170 <HAL_MspInit+0x5c>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_MspInit+0x5c>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60bb      	str	r3, [r7, #8]
 8001130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <HAL_MspInit+0x5c>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0e      	ldr	r2, [pc, #56]	; (8001170 <HAL_MspInit+0x5c>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_MspInit+0x5c>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_MspInit+0x60>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_MspInit+0x60>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001166:	bf00      	nop
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	40021000 	.word	0x40021000
 8001174:	40010000 	.word	0x40010000

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d113      	bne.n	80011b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	4a0b      	ldr	r2, [pc, #44]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	61d3      	str	r3, [r2, #28]
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_TIM_Base_MspInit+0x44>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	201c      	movs	r0, #28
 80011a8:	f000 fa71 	bl	800168e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011ac:	201c      	movs	r0, #28
 80011ae:	f000 fa8a 	bl	80016c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40021000 	.word	0x40021000

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <NMI_Handler+0x4>

080011c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ca:	e7fe      	b.n	80011ca <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <MemManage_Handler+0x4>

080011d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler+0x4>

080011d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler+0x4>

080011de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001206:	f000 f94f 	bl	80014a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM2_IRQHandler+0x10>)
 8001216:	f001 f8ab 	bl	8002370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000104 	.word	0x20000104

08001224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr

08001230 <set_timer0>:
int timer3_flag = 0;

int one_sec=100;
int one_sec_flag=0;

void set_timer0(int duration) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    timer0_counter = duration / TIMER_CYCLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <set_timer0+0x28>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001242:	4a06      	ldr	r2, [pc, #24]	; (800125c <set_timer0+0x2c>)
 8001244:	6013      	str	r3, [r2, #0]
    timer0_flag = 0;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <set_timer0+0x30>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000084 	.word	0x20000084
 800125c:	200000d4 	.word	0x200000d4
 8001260:	200000d8 	.word	0x200000d8

08001264 <timer0_run>:

void timer0_run() {
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
    if (timer0_counter > 0) {
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <timer0_run+0x2c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	dd0b      	ble.n	8001288 <timer0_run+0x24>
        timer0_counter--;
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <timer0_run+0x2c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	3b01      	subs	r3, #1
 8001276:	4a06      	ldr	r2, [pc, #24]	; (8001290 <timer0_run+0x2c>)
 8001278:	6013      	str	r3, [r2, #0]
        if (timer0_counter == 0)
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <timer0_run+0x2c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <timer0_run+0x24>
            timer0_flag = 1;
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <timer0_run+0x30>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
    }
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	200000d4 	.word	0x200000d4
 8001294:	200000d8 	.word	0x200000d8

08001298 <timer1_run>:
void set_timer1(int duration) {
    timer1_counter = duration / TIMER_CYCLE;
    timer1_flag = 0;
}

void timer1_run() {
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
    if (timer1_counter > 0) {
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <timer1_run+0x2c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	dd0b      	ble.n	80012bc <timer1_run+0x24>
        timer1_counter--;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <timer1_run+0x2c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <timer1_run+0x2c>)
 80012ac:	6013      	str	r3, [r2, #0]
        if (timer1_counter == 0)
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <timer1_run+0x2c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <timer1_run+0x24>
            timer1_flag = 1;
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <timer1_run+0x30>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
    }
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	200000dc 	.word	0x200000dc
 80012c8:	200000e0 	.word	0x200000e0

080012cc <set_timer2>:

void set_timer2(int duration) {
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
    timer2_counter = duration / TIMER_CYCLE;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <set_timer2+0x28>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	fb92 f3f3 	sdiv	r3, r2, r3
 80012de:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <set_timer2+0x2c>)
 80012e0:	6013      	str	r3, [r2, #0]
    timer2_flag = 0;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <set_timer2+0x30>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000084 	.word	0x20000084
 80012f8:	200000e4 	.word	0x200000e4
 80012fc:	200000e8 	.word	0x200000e8

08001300 <timer2_run>:

void timer2_run() {
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
    if (timer2_counter > 0) {
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <timer2_run+0x2c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	dd0b      	ble.n	8001324 <timer2_run+0x24>
        timer2_counter--;
 800130c:	4b07      	ldr	r3, [pc, #28]	; (800132c <timer2_run+0x2c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3b01      	subs	r3, #1
 8001312:	4a06      	ldr	r2, [pc, #24]	; (800132c <timer2_run+0x2c>)
 8001314:	6013      	str	r3, [r2, #0]
        if (timer2_counter == 0)
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <timer2_run+0x2c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d102      	bne.n	8001324 <timer2_run+0x24>
            timer2_flag = 1;
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <timer2_run+0x30>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
    }
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	200000e4 	.word	0x200000e4
 8001330:	200000e8 	.word	0x200000e8

08001334 <set_timer3>:

void set_timer3(int duration) {
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    timer3_counter = duration / TIMER_CYCLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <set_timer3+0x28>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	fb92 f3f3 	sdiv	r3, r2, r3
 8001346:	4a06      	ldr	r2, [pc, #24]	; (8001360 <set_timer3+0x2c>)
 8001348:	6013      	str	r3, [r2, #0]
    timer3_flag = 0;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <set_timer3+0x30>)
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000084 	.word	0x20000084
 8001360:	200000ec 	.word	0x200000ec
 8001364:	200000f0 	.word	0x200000f0

08001368 <timer3_run>:

void timer3_run() {
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
    if (timer3_counter > 0) {
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <timer3_run+0x2c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	dd0b      	ble.n	800138c <timer3_run+0x24>
        timer3_counter--;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <timer3_run+0x2c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3b01      	subs	r3, #1
 800137a:	4a06      	ldr	r2, [pc, #24]	; (8001394 <timer3_run+0x2c>)
 800137c:	6013      	str	r3, [r2, #0]
        if (timer3_counter == 0)
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <timer3_run+0x2c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <timer3_run+0x24>
            timer3_flag = 1;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <timer3_run+0x30>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]
    }
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	200000ec 	.word	0x200000ec
 8001398:	200000f0 	.word	0x200000f0

0800139c <one_sec_run>:

void one_sec_run(){
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
	one_sec--;
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <one_sec_run+0x2c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <one_sec_run+0x2c>)
 80013a8:	6013      	str	r3, [r2, #0]
	if(one_sec<=0){
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <one_sec_run+0x2c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dc05      	bgt.n	80013be <one_sec_run+0x22>
		one_sec_flag=1;
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <one_sec_run+0x30>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
		one_sec=100;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <one_sec_run+0x2c>)
 80013ba:	2264      	movs	r2, #100	; 0x64
 80013bc:	601a      	str	r2, [r3, #0]
	}

}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000088 	.word	0x20000088
 80013cc:	200000f4 	.word	0x200000f4

080013d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013d0:	f7ff ff28 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013d6:	490c      	ldr	r1, [pc, #48]	; (8001408 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013d8:	4a0c      	ldr	r2, [pc, #48]	; (800140c <LoopFillZerobss+0x16>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a09      	ldr	r2, [pc, #36]	; (8001410 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013ec:	4c09      	ldr	r4, [pc, #36]	; (8001414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f001 faf9 	bl	80029f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fe:	f7ff fd3b 	bl	8000e78 <main>
  bx lr
 8001402:	4770      	bx	lr
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800140c:	08002a8c 	.word	0x08002a8c
  ldr r2, =_sbss
 8001410:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001414:	20000150 	.word	0x20000150

08001418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_2_IRQHandler>
	...

0800141c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <HAL_Init+0x28>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a07      	ldr	r2, [pc, #28]	; (8001444 <HAL_Init+0x28>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142c:	2003      	movs	r0, #3
 800142e:	f000 f923 	bl	8001678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001432:	200f      	movs	r0, #15
 8001434:	f000 f808 	bl	8001448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001438:	f7ff fe6c 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40022000 	.word	0x40022000

08001448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x54>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_InitTick+0x58>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f93b 	bl	80016e2 <HAL_SYSTICK_Config>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e00e      	b.n	8001494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b0f      	cmp	r3, #15
 800147a:	d80a      	bhi.n	8001492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800147c:	2200      	movs	r2, #0
 800147e:	6879      	ldr	r1, [r7, #4]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	f000 f903 	bl	800168e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001488:	4a06      	ldr	r2, [pc, #24]	; (80014a4 <HAL_InitTick+0x5c>)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	e000      	b.n	8001494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000080 	.word	0x20000080
 80014a0:	20000090 	.word	0x20000090
 80014a4:	2000008c 	.word	0x2000008c

080014a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x1c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_IncTick+0x20>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	4a03      	ldr	r2, [pc, #12]	; (80014c8 <HAL_IncTick+0x20>)
 80014ba:	6013      	str	r3, [r2, #0]
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000090 	.word	0x20000090
 80014c8:	2000014c 	.word	0x2000014c

080014cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b02      	ldr	r3, [pc, #8]	; (80014dc <HAL_GetTick+0x10>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	2000014c 	.word	0x2000014c

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4906      	ldr	r1, [pc, #24]	; (8001578 <__NVIC_EnableIRQ+0x34>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100

0800157c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	6039      	str	r1, [r7, #0]
 8001586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	2b00      	cmp	r3, #0
 800158e:	db0a      	blt.n	80015a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	b2da      	uxtb	r2, r3
 8001594:	490c      	ldr	r1, [pc, #48]	; (80015c8 <__NVIC_SetPriority+0x4c>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	b2d2      	uxtb	r2, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a4:	e00a      	b.n	80015bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4908      	ldr	r1, [pc, #32]	; (80015cc <__NVIC_SetPriority+0x50>)
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	3b04      	subs	r3, #4
 80015b4:	0112      	lsls	r2, r2, #4
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	761a      	strb	r2, [r3, #24]
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f1c3 0307 	rsb	r3, r3, #7
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	bf28      	it	cs
 80015ee:	2304      	movcs	r3, #4
 80015f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3304      	adds	r3, #4
 80015f6:	2b06      	cmp	r3, #6
 80015f8:	d902      	bls.n	8001600 <NVIC_EncodePriority+0x30>
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3b03      	subs	r3, #3
 80015fe:	e000      	b.n	8001602 <NVIC_EncodePriority+0x32>
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43da      	mvns	r2, r3
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	401a      	ands	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001618:	f04f 31ff 	mov.w	r1, #4294967295
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43d9      	mvns	r1, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	4313      	orrs	r3, r2
         );
}
 800162a:	4618      	mov	r0, r3
 800162c:	3724      	adds	r7, #36	; 0x24
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001644:	d301      	bcc.n	800164a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001646:	2301      	movs	r3, #1
 8001648:	e00f      	b.n	800166a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <SysTick_Config+0x40>)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	3b01      	subs	r3, #1
 8001650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001652:	210f      	movs	r1, #15
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f7ff ff90 	bl	800157c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800165c:	4b05      	ldr	r3, [pc, #20]	; (8001674 <SysTick_Config+0x40>)
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001662:	4b04      	ldr	r3, [pc, #16]	; (8001674 <SysTick_Config+0x40>)
 8001664:	2207      	movs	r2, #7
 8001666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	e000e010 	.word	0xe000e010

08001678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff ff2d 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	4603      	mov	r3, r0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a0:	f7ff ff42 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	6978      	ldr	r0, [r7, #20]
 80016ac:	f7ff ff90 	bl	80015d0 <NVIC_EncodePriority>
 80016b0:	4602      	mov	r2, r0
 80016b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5f 	bl	800157c <__NVIC_SetPriority>
}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff ff35 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ffa2 	bl	8001634 <SysTick_Config>
 80016f0:	4603      	mov	r3, r0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e148      	b.n	80019a2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001710:	2201      	movs	r2, #1
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8137 	bne.w	800199c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4aa3      	ldr	r2, [pc, #652]	; (80019c0 <HAL_GPIO_Init+0x2c4>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d05e      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001738:	4aa1      	ldr	r2, [pc, #644]	; (80019c0 <HAL_GPIO_Init+0x2c4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d875      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <HAL_GPIO_Init+0x2c8>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d058      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001744:	4a9f      	ldr	r2, [pc, #636]	; (80019c4 <HAL_GPIO_Init+0x2c8>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d86f      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800174a:	4a9f      	ldr	r2, [pc, #636]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d052      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001750:	4a9d      	ldr	r2, [pc, #628]	; (80019c8 <HAL_GPIO_Init+0x2cc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d869      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001756:	4a9d      	ldr	r2, [pc, #628]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d04c      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 800175c:	4a9b      	ldr	r2, [pc, #620]	; (80019cc <HAL_GPIO_Init+0x2d0>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d863      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001762:	4a9b      	ldr	r2, [pc, #620]	; (80019d0 <HAL_GPIO_Init+0x2d4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d046      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
 8001768:	4a99      	ldr	r2, [pc, #612]	; (80019d0 <HAL_GPIO_Init+0x2d4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d85d      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 800176e:	2b12      	cmp	r3, #18
 8001770:	d82a      	bhi.n	80017c8 <HAL_GPIO_Init+0xcc>
 8001772:	2b12      	cmp	r3, #18
 8001774:	d859      	bhi.n	800182a <HAL_GPIO_Init+0x12e>
 8001776:	a201      	add	r2, pc, #4	; (adr r2, 800177c <HAL_GPIO_Init+0x80>)
 8001778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177c:	080017f7 	.word	0x080017f7
 8001780:	080017d1 	.word	0x080017d1
 8001784:	080017e3 	.word	0x080017e3
 8001788:	08001825 	.word	0x08001825
 800178c:	0800182b 	.word	0x0800182b
 8001790:	0800182b 	.word	0x0800182b
 8001794:	0800182b 	.word	0x0800182b
 8001798:	0800182b 	.word	0x0800182b
 800179c:	0800182b 	.word	0x0800182b
 80017a0:	0800182b 	.word	0x0800182b
 80017a4:	0800182b 	.word	0x0800182b
 80017a8:	0800182b 	.word	0x0800182b
 80017ac:	0800182b 	.word	0x0800182b
 80017b0:	0800182b 	.word	0x0800182b
 80017b4:	0800182b 	.word	0x0800182b
 80017b8:	0800182b 	.word	0x0800182b
 80017bc:	0800182b 	.word	0x0800182b
 80017c0:	080017d9 	.word	0x080017d9
 80017c4:	080017ed 	.word	0x080017ed
 80017c8:	4a82      	ldr	r2, [pc, #520]	; (80019d4 <HAL_GPIO_Init+0x2d8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017ce:	e02c      	b.n	800182a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	623b      	str	r3, [r7, #32]
          break;
 80017d6:	e029      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	3304      	adds	r3, #4
 80017de:	623b      	str	r3, [r7, #32]
          break;
 80017e0:	e024      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	3308      	adds	r3, #8
 80017e8:	623b      	str	r3, [r7, #32]
          break;
 80017ea:	e01f      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	330c      	adds	r3, #12
 80017f2:	623b      	str	r3, [r7, #32]
          break;
 80017f4:	e01a      	b.n	800182c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017fe:	2304      	movs	r3, #4
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e013      	b.n	800182c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d105      	bne.n	8001818 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800180c:	2308      	movs	r3, #8
 800180e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	611a      	str	r2, [r3, #16]
          break;
 8001816:	e009      	b.n	800182c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001818:	2308      	movs	r3, #8
 800181a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	69fa      	ldr	r2, [r7, #28]
 8001820:	615a      	str	r2, [r3, #20]
          break;
 8001822:	e003      	b.n	800182c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
          break;
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x130>
          break;
 800182a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d801      	bhi.n	8001836 <HAL_GPIO_Init+0x13a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	e001      	b.n	800183a <HAL_GPIO_Init+0x13e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	3304      	adds	r3, #4
 800183a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	2bff      	cmp	r3, #255	; 0xff
 8001840:	d802      	bhi.n	8001848 <HAL_GPIO_Init+0x14c>
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x152>
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	3b08      	subs	r3, #8
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	210f      	movs	r1, #15
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	fa01 f303 	lsl.w	r3, r1, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	401a      	ands	r2, r3
 8001860:	6a39      	ldr	r1, [r7, #32]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 8090 	beq.w	800199c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800187c:	4b56      	ldr	r3, [pc, #344]	; (80019d8 <HAL_GPIO_Init+0x2dc>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a55      	ldr	r2, [pc, #340]	; (80019d8 <HAL_GPIO_Init+0x2dc>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_GPIO_Init+0x2dc>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001894:	4a51      	ldr	r2, [pc, #324]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	089b      	lsrs	r3, r3, #2
 800189a:	3302      	adds	r3, #2
 800189c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	220f      	movs	r2, #15
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a49      	ldr	r2, [pc, #292]	; (80019e0 <HAL_GPIO_Init+0x2e4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d00d      	beq.n	80018dc <HAL_GPIO_Init+0x1e0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a48      	ldr	r2, [pc, #288]	; (80019e4 <HAL_GPIO_Init+0x2e8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d007      	beq.n	80018d8 <HAL_GPIO_Init+0x1dc>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a47      	ldr	r2, [pc, #284]	; (80019e8 <HAL_GPIO_Init+0x2ec>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d101      	bne.n	80018d4 <HAL_GPIO_Init+0x1d8>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e004      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d4:	2303      	movs	r3, #3
 80018d6:	e002      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_GPIO_Init+0x1e2>
 80018dc:	2300      	movs	r3, #0
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	f002 0203 	and.w	r2, r2, #3
 80018e4:	0092      	lsls	r2, r2, #2
 80018e6:	4093      	lsls	r3, r2
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ee:	493b      	ldr	r1, [pc, #236]	; (80019dc <HAL_GPIO_Init+0x2e0>)
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	089b      	lsrs	r3, r3, #2
 80018f4:	3302      	adds	r3, #2
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001908:	4b38      	ldr	r3, [pc, #224]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	4937      	ldr	r1, [pc, #220]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
 8001914:	e006      	b.n	8001924 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001916:	4b35      	ldr	r3, [pc, #212]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	43db      	mvns	r3, r3
 800191e:	4933      	ldr	r1, [pc, #204]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001920:	4013      	ands	r3, r2
 8001922:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d006      	beq.n	800193e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001930:	4b2e      	ldr	r3, [pc, #184]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	492d      	ldr	r1, [pc, #180]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	60cb      	str	r3, [r1, #12]
 800193c:	e006      	b.n	800194c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	43db      	mvns	r3, r3
 8001946:	4929      	ldr	r1, [pc, #164]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001948:	4013      	ands	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001958:	4b24      	ldr	r3, [pc, #144]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	4923      	ldr	r1, [pc, #140]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001966:	4b21      	ldr	r3, [pc, #132]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	491f      	ldr	r1, [pc, #124]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001970:	4013      	ands	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4919      	ldr	r1, [pc, #100]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	4915      	ldr	r1, [pc, #84]	; (80019ec <HAL_GPIO_Init+0x2f0>)
 8001998:	4013      	ands	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	3301      	adds	r3, #1
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f aeaf 	bne.w	8001710 <HAL_GPIO_Init+0x14>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	372c      	adds	r7, #44	; 0x2c
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	10320000 	.word	0x10320000
 80019c4:	10310000 	.word	0x10310000
 80019c8:	10220000 	.word	0x10220000
 80019cc:	10210000 	.word	0x10210000
 80019d0:	10120000 	.word	0x10120000
 80019d4:	10110000 	.word	0x10110000
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40010000 	.word	0x40010000
 80019e0:	40010800 	.word	0x40010800
 80019e4:	40010c00 	.word	0x40010c00
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40010400 	.word	0x40010400

080019f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e001      	b.n	8001a12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b083      	sub	sp, #12
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	807b      	strh	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a2e:	787b      	ldrb	r3, [r7, #1]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d003      	beq.n	8001a3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a34:	887a      	ldrh	r2, [r7, #2]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a3a:	e003      	b.n	8001a44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	041a      	lsls	r2, r3, #16
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bc80      	pop	{r7}
 8001a4c:	4770      	bx	lr

08001a4e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
 8001a56:	460b      	mov	r3, r1
 8001a58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a60:	887a      	ldrh	r2, [r7, #2]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	041a      	lsls	r2, r3, #16
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43d9      	mvns	r1, r3
 8001a6c:	887b      	ldrh	r3, [r7, #2]
 8001a6e:	400b      	ands	r3, r1
 8001a70:	431a      	orrs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e26c      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8087 	beq.w	8001bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aac:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d112      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
 8001ab8:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d06c      	beq.n	8001bac <HAL_RCC_OscConfig+0x12c>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d168      	bne.n	8001bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e246      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x76>
 8001ae8:	4b80      	ldr	r3, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a7f      	ldr	r2, [pc, #508]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e02e      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b7b      	ldr	r3, [pc, #492]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7a      	ldr	r2, [pc, #488]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b78      	ldr	r3, [pc, #480]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a77      	ldr	r2, [pc, #476]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01d      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0xbc>
 8001b22:	4b72      	ldr	r3, [pc, #456]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a71      	ldr	r2, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a6e      	ldr	r2, [pc, #440]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0xd4>
 8001b3c:	4b6b      	ldr	r3, [pc, #428]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a6a      	ldr	r2, [pc, #424]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a67      	ldr	r2, [pc, #412]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fcb6 	bl	80014cc <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fcb2 	bl	80014cc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	; 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1fa      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe4>
 8001b82:	e014      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b84:	f7ff fca2 	bl	80014cc <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b8c:	f7ff fc9e 	bl	80014cc <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b64      	cmp	r3, #100	; 0x64
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e1e6      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b9e:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x10c>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d063      	beq.n	8001c82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bba:	4b4c      	ldr	r3, [pc, #304]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00b      	beq.n	8001bde <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bc6:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
 8001bd2:	4b46      	ldr	r3, [pc, #280]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d116      	bne.n	8001c0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bde:	4b43      	ldr	r3, [pc, #268]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d001      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1ba      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf6:	4b3d      	ldr	r3, [pc, #244]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4939      	ldr	r1, [pc, #228]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	e03a      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c14:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fc57 	bl	80014cc <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c22:	f7ff fc53 	bl	80014cc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e19b      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c40:	4b2a      	ldr	r3, [pc, #168]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4927      	ldr	r1, [pc, #156]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
 8001c54:	e015      	b.n	8001c82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <HAL_RCC_OscConfig+0x270>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fc36 	bl	80014cc <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff fc32 	bl	80014cc <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e17a      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d03a      	beq.n	8001d04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d019      	beq.n	8001cca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c96:	4b17      	ldr	r3, [pc, #92]	; (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001c98:	2201      	movs	r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fc16 	bl	80014cc <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fc12 	bl	80014cc <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e15a      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cc2:	2001      	movs	r0, #1
 8001cc4:	f000 fa9a 	bl	80021fc <RCC_Delay>
 8001cc8:	e01c      	b.n	8001d04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_RCC_OscConfig+0x274>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fbfc 	bl	80014cc <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fbf8 	bl	80014cc <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d908      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e140      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	42420000 	.word	0x42420000
 8001cf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf8:	4b9e      	ldr	r3, [pc, #632]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e9      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80a6 	beq.w	8001e5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d16:	4b97      	ldr	r3, [pc, #604]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b94      	ldr	r3, [pc, #592]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a93      	ldr	r2, [pc, #588]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b91      	ldr	r3, [pc, #580]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	60bb      	str	r3, [r7, #8]
 8001d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d3e:	4b8e      	ldr	r3, [pc, #568]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d118      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d4a:	4b8b      	ldr	r3, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a8a      	ldr	r2, [pc, #552]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fbb9 	bl	80014cc <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d5e:	f7ff fbb5 	bl	80014cc <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b64      	cmp	r3, #100	; 0x64
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e0fd      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d70:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <HAL_RCC_OscConfig+0x4f8>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d84:	4b7b      	ldr	r3, [pc, #492]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a7a      	ldr	r2, [pc, #488]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6213      	str	r3, [r2, #32]
 8001d90:	e02d      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x334>
 8001d9a:	4b76      	ldr	r3, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a75      	ldr	r2, [pc, #468]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a72      	ldr	r2, [pc, #456]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
 8001db2:	e01c      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b05      	cmp	r3, #5
 8001dba:	d10c      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x356>
 8001dbc:	4b6d      	ldr	r3, [pc, #436]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a6c      	ldr	r2, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	4b6a      	ldr	r3, [pc, #424]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a69      	ldr	r2, [pc, #420]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x36e>
 8001dd6:	4b67      	ldr	r3, [pc, #412]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a66      	ldr	r2, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f023 0301 	bic.w	r3, r3, #1
 8001de0:	6213      	str	r3, [r2, #32]
 8001de2:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	4a63      	ldr	r2, [pc, #396]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fb69 	bl	80014cc <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fb65 	bl	80014cc <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0ab      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e14:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ee      	beq.n	8001dfe <HAL_RCC_OscConfig+0x37e>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7ff fb53 	bl	80014cc <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7ff fb4f 	bl	80014cc <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e095      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d105      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a47      	ldr	r2, [pc, #284]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8081 	beq.w	8001f6a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e68:	4b42      	ldr	r3, [pc, #264]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d061      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d146      	bne.n	8001f0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7c:	4b3f      	ldr	r3, [pc, #252]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e82:	f7ff fb23 	bl	80014cc <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7ff fb1f 	bl	80014cc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e067      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	492d      	ldr	r1, [pc, #180]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a19      	ldr	r1, [r3, #32]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	4927      	ldr	r1, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff faf3 	bl	80014cc <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff faef 	bl	80014cc <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e037      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
 8001f08:	e02f      	b.n	8001f6a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_OscConfig+0x4fc>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7ff fadc 	bl	80014cc <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fad8 	bl	80014cc <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e020      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x498>
 8001f36:	e018      	b.n	8001f6a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d101      	bne.n	8001f44 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e013      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	42420060 	.word	0x42420060

08001f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d0      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4965      	ldr	r1, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ffe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d040      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e073      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06b      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002070:	f7ff fa2c 	bl	80014cc <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7ff fa28 	bl	80014cc <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e053      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d210      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 0207 	bic.w	r2, r3, #7
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1c0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1cc>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f98a 	bl	8001448 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40022000 	.word	0x40022000
 8002144:	40021000 	.word	0x40021000
 8002148:	08002a60 	.word	0x08002a60
 800214c:	20000080 	.word	0x20000080
 8002150:	2000008c 	.word	0x2000008c

08002154 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216e:	4b1e      	ldr	r3, [pc, #120]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 030c 	and.w	r3, r3, #12
 800217a:	2b04      	cmp	r3, #4
 800217c:	d002      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x30>
 800217e:	2b08      	cmp	r3, #8
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x36>
 8002182:	e027      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002186:	613b      	str	r3, [r7, #16]
      break;
 8002188:	e027      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002194:	5cd3      	ldrb	r3, [r2, r3]
 8002196:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021ae:	5cd3      	ldrb	r3, [r2, r3]
 80021b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021b6:	fb02 f203 	mul.w	r2, r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a0c      	ldr	r2, [pc, #48]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	613b      	str	r3, [r7, #16]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_RCC_GetSysClockFreq+0x98>)
 80021d6:	613b      	str	r3, [r7, #16]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	693b      	ldr	r3, [r7, #16]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	007a1200 	.word	0x007a1200
 80021f0:	08002a70 	.word	0x08002a70
 80021f4:	08002a80 	.word	0x08002a80
 80021f8:	003d0900 	.word	0x003d0900

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000080 	.word	0x20000080
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e041      	b.n	80022ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe ff8a 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4610      	mov	r0, r2
 8002278:	f000 fa56 	bl	8002728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d001      	beq.n	80022f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e035      	b.n	800235c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_TIM_Base_Start_IT+0x90>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d009      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x4e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231a:	d004      	beq.n	8002326 <HAL_TIM_Base_Start_IT+0x4e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_TIM_Base_Start_IT+0x94>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d111      	bne.n	800234a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d010      	beq.n	800235a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002348:	e007      	b.n	800235a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0201 	orr.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40012c00 	.word	0x40012c00
 800236c:	40000400 	.word	0x40000400

08002370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d020      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f06f 0202 	mvn.w	r2, #2
 80023a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f998 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80023c0:	e005      	b.n	80023ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f98b 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f99a 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d020      	beq.n	8002420 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 0304 	and.w	r3, r3, #4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01b      	beq.n	8002420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f06f 0204 	mvn.w	r2, #4
 80023f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2202      	movs	r2, #2
 80023f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 f972 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 800240c:	e005      	b.n	800241a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f965 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f974 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d020      	beq.n	800246c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	f003 0308 	and.w	r3, r3, #8
 8002430:	2b00      	cmp	r3, #0
 8002432:	d01b      	beq.n	800246c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f06f 0208 	mvn.w	r2, #8
 800243c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2204      	movs	r2, #4
 8002442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f94c 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 8002458:	e005      	b.n	8002466 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f93f 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f94e 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	d020      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d01b      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0210 	mvn.w	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2208      	movs	r2, #8
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f926 	bl	80026f0 <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f919 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f928 	bl	8002702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0201 	mvn.w	r2, #1
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7fe fde8 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00c      	beq.n	8002500 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fa6f 	bl	80029de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00c      	beq.n	8002524 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800251c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f8f8 	bl	8002714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00c      	beq.n	8002548 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	d007      	beq.n	8002548 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0220 	mvn.w	r2, #32
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fa42 	bl	80029cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIM_ConfigClockSource+0x1c>
 8002568:	2302      	movs	r3, #2
 800256a:	e0b4      	b.n	80026d6 <HAL_TIM_ConfigClockSource+0x186>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800258a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a4:	d03e      	beq.n	8002624 <HAL_TIM_ConfigClockSource+0xd4>
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025aa:	f200 8087 	bhi.w	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025b2:	f000 8086 	beq.w	80026c2 <HAL_TIM_ConfigClockSource+0x172>
 80025b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ba:	d87f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025bc:	2b70      	cmp	r3, #112	; 0x70
 80025be:	d01a      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0xa6>
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d87b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025c4:	2b60      	cmp	r3, #96	; 0x60
 80025c6:	d050      	beq.n	800266a <HAL_TIM_ConfigClockSource+0x11a>
 80025c8:	2b60      	cmp	r3, #96	; 0x60
 80025ca:	d877      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025cc:	2b50      	cmp	r3, #80	; 0x50
 80025ce:	d03c      	beq.n	800264a <HAL_TIM_ConfigClockSource+0xfa>
 80025d0:	2b50      	cmp	r3, #80	; 0x50
 80025d2:	d873      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d058      	beq.n	800268a <HAL_TIM_ConfigClockSource+0x13a>
 80025d8:	2b40      	cmp	r3, #64	; 0x40
 80025da:	d86f      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025dc:	2b30      	cmp	r3, #48	; 0x30
 80025de:	d064      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	2b30      	cmp	r3, #48	; 0x30
 80025e2:	d86b      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025e4:	2b20      	cmp	r3, #32
 80025e6:	d060      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d867      	bhi.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d05c      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025f0:	2b10      	cmp	r3, #16
 80025f2:	d05a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0x15a>
 80025f4:	e062      	b.n	80026bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6818      	ldr	r0, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	6899      	ldr	r1, [r3, #8]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f000 f96a 	bl	80028de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	609a      	str	r2, [r3, #8]
      break;
 8002622:	e04f      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f000 f953 	bl	80028de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002646:	609a      	str	r2, [r3, #8]
      break;
 8002648:	e03c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	f000 f8ca 	bl	80027f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2150      	movs	r1, #80	; 0x50
 8002662:	4618      	mov	r0, r3
 8002664:	f000 f921 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002668:	e02c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6818      	ldr	r0, [r3, #0]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	6859      	ldr	r1, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	461a      	mov	r2, r3
 8002678:	f000 f8e8 	bl	800284c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2160      	movs	r1, #96	; 0x60
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f911 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 8002688:	e01c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	6859      	ldr	r1, [r3, #4]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	461a      	mov	r2, r3
 8002698:	f000 f8aa 	bl	80027f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2140      	movs	r1, #64	; 0x40
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 f901 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026a8:	e00c      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f000 f8f8 	bl	80028aa <TIM_ITRx_SetConfig>
      break;
 80026ba:	e003      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      break;
 80026c0:	e000      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800270a:	bf00      	nop
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
	...

08002728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a2b      	ldr	r2, [pc, #172]	; (80027e8 <TIM_Base_SetConfig+0xc0>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d007      	beq.n	8002750 <TIM_Base_SetConfig+0x28>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x28>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a28      	ldr	r2, [pc, #160]	; (80027ec <TIM_Base_SetConfig+0xc4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a20      	ldr	r2, [pc, #128]	; (80027e8 <TIM_Base_SetConfig+0xc0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <TIM_Base_SetConfig+0x52>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d003      	beq.n	800277a <TIM_Base_SetConfig+0x52>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a1d      	ldr	r2, [pc, #116]	; (80027ec <TIM_Base_SetConfig+0xc4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d108      	bne.n	800278c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d103      	bne.n	80027c0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f023 0201 	bic.w	r2, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	611a      	str	r2, [r3, #16]
  }
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012c00 	.word	0x40012c00
 80027ec:	40000400 	.word	0x40000400

080027f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	f023 0201 	bic.w	r2, r3, #1
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800281a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 030a 	bic.w	r3, r3, #10
 800282c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	621a      	str	r2, [r3, #32]
}
 8002842:	bf00      	nop
 8002844:	371c      	adds	r7, #28
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0210 	bic.w	r2, r3, #16
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	031b      	lsls	r3, r3, #12
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	4313      	orrs	r3, r2
 8002892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	621a      	str	r2, [r3, #32]
}
 80028a0:	bf00      	nop
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b085      	sub	sp, #20
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f043 0307 	orr.w	r3, r3, #7
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	609a      	str	r2, [r3, #8]
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028de:	b480      	push	{r7}
 80028e0:	b087      	sub	sp, #28
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	607a      	str	r2, [r7, #4]
 80028ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	021a      	lsls	r2, r3, #8
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	431a      	orrs	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4313      	orrs	r3, r2
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	609a      	str	r2, [r3, #8]
}
 8002912:	bf00      	nop
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800292c:	2b01      	cmp	r3, #1
 800292e:	d101      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002930:	2302      	movs	r3, #2
 8002932:	e041      	b.n	80029b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800295a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	4313      	orrs	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d004      	beq.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10c      	bne.n	80029a6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	4313      	orrs	r3, r2
 800299c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40000400 	.word	0x40000400

080029cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr

080029de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <__libc_init_array>:
 80029f0:	b570      	push	{r4, r5, r6, lr}
 80029f2:	2600      	movs	r6, #0
 80029f4:	4d0c      	ldr	r5, [pc, #48]	; (8002a28 <__libc_init_array+0x38>)
 80029f6:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <__libc_init_array+0x3c>)
 80029f8:	1b64      	subs	r4, r4, r5
 80029fa:	10a4      	asrs	r4, r4, #2
 80029fc:	42a6      	cmp	r6, r4
 80029fe:	d109      	bne.n	8002a14 <__libc_init_array+0x24>
 8002a00:	f000 f822 	bl	8002a48 <_init>
 8002a04:	2600      	movs	r6, #0
 8002a06:	4d0a      	ldr	r5, [pc, #40]	; (8002a30 <__libc_init_array+0x40>)
 8002a08:	4c0a      	ldr	r4, [pc, #40]	; (8002a34 <__libc_init_array+0x44>)
 8002a0a:	1b64      	subs	r4, r4, r5
 8002a0c:	10a4      	asrs	r4, r4, #2
 8002a0e:	42a6      	cmp	r6, r4
 8002a10:	d105      	bne.n	8002a1e <__libc_init_array+0x2e>
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
 8002a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a18:	4798      	blx	r3
 8002a1a:	3601      	adds	r6, #1
 8002a1c:	e7ee      	b.n	80029fc <__libc_init_array+0xc>
 8002a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a22:	4798      	blx	r3
 8002a24:	3601      	adds	r6, #1
 8002a26:	e7f2      	b.n	8002a0e <__libc_init_array+0x1e>
 8002a28:	08002a84 	.word	0x08002a84
 8002a2c:	08002a84 	.word	0x08002a84
 8002a30:	08002a84 	.word	0x08002a84
 8002a34:	08002a88 	.word	0x08002a88

08002a38 <memset>:
 8002a38:	4603      	mov	r3, r0
 8002a3a:	4402      	add	r2, r0
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d100      	bne.n	8002a42 <memset+0xa>
 8002a40:	4770      	bx	lr
 8002a42:	f803 1b01 	strb.w	r1, [r3], #1
 8002a46:	e7f9      	b.n	8002a3c <memset+0x4>

08002a48 <_init>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	bf00      	nop
 8002a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a4e:	bc08      	pop	{r3}
 8002a50:	469e      	mov	lr, r3
 8002a52:	4770      	bx	lr

08002a54 <_fini>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr
